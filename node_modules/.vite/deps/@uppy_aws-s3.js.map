{
  "version": 3,
  "sources": ["../../retry/lib/retry_operation.js", "../../retry/lib/retry.js", "../../retry/index.js", "../../@uppy/utils/lib/UserFacingApiError.js", "../../p-retry/index.js", "../../is-network-error/index.js", "../../@uppy/utils/lib/NetworkError.js", "../../@uppy/utils/lib/fetchWithNetworkError.js", "../../@uppy/utils/lib/hasProperty.js", "../../@uppy/utils/lib/ErrorWithCause.js", "../../@uppy/utils/lib/getSocketHost.js", "../../@uppy/companion-client/lib/AuthError.js", "../../@uppy/companion-client/lib/RequestClient.js", "../../@uppy/companion-client/lib/Provider.js", "../../@uppy/core/lib/EventManager.js", "../../@uppy/utils/lib/RateLimitedQueue.js", "../../@uppy/utils/lib/fileFilters.js", "../../@uppy/utils/lib/AbortController.js", "../../@uppy/utils/lib/getAllowedMetaFields.js", "../../@uppy/aws-s3/lib/MultipartUploader.js", "../../@uppy/aws-s3/lib/utils.js", "../../@uppy/aws-s3/lib/createSignedURL.js", "../../@uppy/aws-s3/lib/HTTPCommunicationQueue.js", "../../@uppy/aws-s3/lib/index.js"],
  "sourcesContent": ["function RetryOperation(timeouts, options) {\n  // Compatibility for the old (timeouts, retryForever) signature\n  if (typeof options === 'boolean') {\n    options = { forever: options };\n  }\n\n  this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));\n  this._timeouts = timeouts;\n  this._options = options || {};\n  this._maxRetryTime = options && options.maxRetryTime || Infinity;\n  this._fn = null;\n  this._errors = [];\n  this._attempts = 1;\n  this._operationTimeout = null;\n  this._operationTimeoutCb = null;\n  this._timeout = null;\n  this._operationStart = null;\n  this._timer = null;\n\n  if (this._options.forever) {\n    this._cachedTimeouts = this._timeouts.slice(0);\n  }\n}\nmodule.exports = RetryOperation;\n\nRetryOperation.prototype.reset = function() {\n  this._attempts = 1;\n  this._timeouts = this._originalTimeouts.slice(0);\n}\n\nRetryOperation.prototype.stop = function() {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n  if (this._timer) {\n    clearTimeout(this._timer);\n  }\n\n  this._timeouts       = [];\n  this._cachedTimeouts = null;\n};\n\nRetryOperation.prototype.retry = function(err) {\n  if (this._timeout) {\n    clearTimeout(this._timeout);\n  }\n\n  if (!err) {\n    return false;\n  }\n  var currentTime = new Date().getTime();\n  if (err && currentTime - this._operationStart >= this._maxRetryTime) {\n    this._errors.push(err);\n    this._errors.unshift(new Error('RetryOperation timeout occurred'));\n    return false;\n  }\n\n  this._errors.push(err);\n\n  var timeout = this._timeouts.shift();\n  if (timeout === undefined) {\n    if (this._cachedTimeouts) {\n      // retry forever, only keep last error\n      this._errors.splice(0, this._errors.length - 1);\n      timeout = this._cachedTimeouts.slice(-1);\n    } else {\n      return false;\n    }\n  }\n\n  var self = this;\n  this._timer = setTimeout(function() {\n    self._attempts++;\n\n    if (self._operationTimeoutCb) {\n      self._timeout = setTimeout(function() {\n        self._operationTimeoutCb(self._attempts);\n      }, self._operationTimeout);\n\n      if (self._options.unref) {\n          self._timeout.unref();\n      }\n    }\n\n    self._fn(self._attempts);\n  }, timeout);\n\n  if (this._options.unref) {\n      this._timer.unref();\n  }\n\n  return true;\n};\n\nRetryOperation.prototype.attempt = function(fn, timeoutOps) {\n  this._fn = fn;\n\n  if (timeoutOps) {\n    if (timeoutOps.timeout) {\n      this._operationTimeout = timeoutOps.timeout;\n    }\n    if (timeoutOps.cb) {\n      this._operationTimeoutCb = timeoutOps.cb;\n    }\n  }\n\n  var self = this;\n  if (this._operationTimeoutCb) {\n    this._timeout = setTimeout(function() {\n      self._operationTimeoutCb();\n    }, self._operationTimeout);\n  }\n\n  this._operationStart = new Date().getTime();\n\n  this._fn(this._attempts);\n};\n\nRetryOperation.prototype.try = function(fn) {\n  console.log('Using RetryOperation.try() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = function(fn) {\n  console.log('Using RetryOperation.start() is deprecated');\n  this.attempt(fn);\n};\n\nRetryOperation.prototype.start = RetryOperation.prototype.try;\n\nRetryOperation.prototype.errors = function() {\n  return this._errors;\n};\n\nRetryOperation.prototype.attempts = function() {\n  return this._attempts;\n};\n\nRetryOperation.prototype.mainError = function() {\n  if (this._errors.length === 0) {\n    return null;\n  }\n\n  var counts = {};\n  var mainError = null;\n  var mainErrorCount = 0;\n\n  for (var i = 0; i < this._errors.length; i++) {\n    var error = this._errors[i];\n    var message = error.message;\n    var count = (counts[message] || 0) + 1;\n\n    counts[message] = count;\n\n    if (count >= mainErrorCount) {\n      mainError = error;\n      mainErrorCount = count;\n    }\n  }\n\n  return mainError;\n};\n", "var RetryOperation = require('./retry_operation');\n\nexports.operation = function(options) {\n  var timeouts = exports.timeouts(options);\n  return new RetryOperation(timeouts, {\n      forever: options && (options.forever || options.retries === Infinity),\n      unref: options && options.unref,\n      maxRetryTime: options && options.maxRetryTime\n  });\n};\n\nexports.timeouts = function(options) {\n  if (options instanceof Array) {\n    return [].concat(options);\n  }\n\n  var opts = {\n    retries: 10,\n    factor: 2,\n    minTimeout: 1 * 1000,\n    maxTimeout: Infinity,\n    randomize: false\n  };\n  for (var key in options) {\n    opts[key] = options[key];\n  }\n\n  if (opts.minTimeout > opts.maxTimeout) {\n    throw new Error('minTimeout is greater than maxTimeout');\n  }\n\n  var timeouts = [];\n  for (var i = 0; i < opts.retries; i++) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  if (options && options.forever && !timeouts.length) {\n    timeouts.push(this.createTimeout(i, opts));\n  }\n\n  // sort the array numerically ascending\n  timeouts.sort(function(a,b) {\n    return a - b;\n  });\n\n  return timeouts;\n};\n\nexports.createTimeout = function(attempt, opts) {\n  var random = (opts.randomize)\n    ? (Math.random() + 1)\n    : 1;\n\n  var timeout = Math.round(random * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));\n  timeout = Math.min(timeout, opts.maxTimeout);\n\n  return timeout;\n};\n\nexports.wrap = function(obj, options, methods) {\n  if (options instanceof Array) {\n    methods = options;\n    options = null;\n  }\n\n  if (!methods) {\n    methods = [];\n    for (var key in obj) {\n      if (typeof obj[key] === 'function') {\n        methods.push(key);\n      }\n    }\n  }\n\n  for (var i = 0; i < methods.length; i++) {\n    var method   = methods[i];\n    var original = obj[method];\n\n    obj[method] = function retryWrapper(original) {\n      var op       = exports.operation(options);\n      var args     = Array.prototype.slice.call(arguments, 1);\n      var callback = args.pop();\n\n      args.push(function(err) {\n        if (op.retry(err)) {\n          return;\n        }\n        if (err) {\n          arguments[0] = op.mainError();\n        }\n        callback.apply(this, arguments);\n      });\n\n      op.attempt(function() {\n        original.apply(obj, args);\n      });\n    }.bind(obj, original);\n    obj[method].options = options;\n  }\n};\n", "module.exports = require('./lib/retry');", "class UserFacingApiError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'UserFacingApiError';\n  }\n}\nexport default UserFacingApiError;", "import retry from 'retry';\nimport isNetworkError from 'is-network-error';\n\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\n\t\tif (message instanceof Error) {\n\t\t\tthis.originalError = message;\n\t\t\t({message} = message);\n\t\t} else {\n\t\t\tthis.originalError = new Error(message);\n\t\t\tthis.originalError.stack = this.stack;\n\t\t}\n\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\nconst decorateErrorWithCounts = (error, attemptNumber, options) => {\n\t// Minus 1 from attemptNumber because the first attempt does not count as a retry\n\tconst retriesLeft = options.retries - (attemptNumber - 1);\n\n\terror.attemptNumber = attemptNumber;\n\terror.retriesLeft = retriesLeft;\n\treturn error;\n};\n\nexport default async function pRetry(input, options) {\n\treturn new Promise((resolve, reject) => {\n\t\toptions = {...options};\n\t\toptions.onFailedAttempt ??= () => {};\n\t\toptions.shouldRetry ??= () => true;\n\t\toptions.retries ??= 10;\n\n\t\tconst operation = retry.operation(options);\n\n\t\tconst abortHandler = () => {\n\t\t\toperation.stop();\n\t\t\treject(options.signal?.reason);\n\t\t};\n\n\t\tif (options.signal && !options.signal.aborted) {\n\t\t\toptions.signal.addEventListener('abort', abortHandler, {once: true});\n\t\t}\n\n\t\tconst cleanUp = () => {\n\t\t\toptions.signal?.removeEventListener('abort', abortHandler);\n\t\t\toperation.stop();\n\t\t};\n\n\t\toperation.attempt(async attemptNumber => {\n\t\t\ttry {\n\t\t\t\tconst result = await input(attemptNumber);\n\t\t\t\tcleanUp();\n\t\t\t\tresolve(result);\n\t\t\t} catch (error) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!(error instanceof Error)) {\n\t\t\t\t\t\tthrow new TypeError(`Non-error was thrown: \"${error}\". You should only throw errors.`);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error instanceof AbortError) {\n\t\t\t\t\t\tthrow error.originalError;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (error instanceof TypeError && !isNetworkError(error)) {\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\n\t\t\t\t\tdecorateErrorWithCounts(error, attemptNumber, options);\n\n\t\t\t\t\tif (!(await options.shouldRetry(error))) {\n\t\t\t\t\t\toperation.stop();\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t}\n\n\t\t\t\t\tawait options.onFailedAttempt(error);\n\n\t\t\t\t\tif (!operation.retry(error)) {\n\t\t\t\t\t\tthrow operation.mainError();\n\t\t\t\t\t}\n\t\t\t\t} catch (finalError) {\n\t\t\t\t\tdecorateErrorWithCounts(finalError, attemptNumber, options);\n\t\t\t\t\tcleanUp();\n\t\t\t\t\treject(finalError);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n}\n", "const objectToString = Object.prototype.toString;\n\nconst isError = value => objectToString.call(value) === '[object Error]';\n\nconst errorMessages = new Set([\n\t'network error', // Chrome\n\t'Failed to fetch', // Chrome\n\t'NetworkError when attempting to fetch resource.', // Firefox\n\t'The Internet connection appears to be offline.', // Safari 16\n\t'Load failed', // Safari 17+\n\t'Network request failed', // `cross-fetch`\n\t'fetch failed', // Undici (Node.js)\n\t'terminated', // Undici (Node.js)\n]);\n\nexport default function isNetworkError(error) {\n\tconst isValid = error\n\t\t&& isError(error)\n\t\t&& error.name === 'TypeError'\n\t\t&& typeof error.message === 'string';\n\n\tif (!isValid) {\n\t\treturn false;\n\t}\n\n\t// We do an extra check for Safari 17+ as it has a very generic error message.\n\t// Network errors in Safari have no stack.\n\tif (error.message === 'Load failed') {\n\t\treturn error.stack === undefined;\n\t}\n\n\treturn errorMessages.has(error.message);\n}\n", "class NetworkError extends Error {\n  constructor(error, xhr) {\n    if (xhr === void 0) {\n      xhr = null;\n    }\n    super(`This looks like a network error, the endpoint might be blocked by an internet provider or a firewall.`);\n    this.cause = error;\n    this.isNetworkError = true;\n    this.request = xhr;\n  }\n}\nexport default NetworkError;", "import NetworkError from './NetworkError.js';\n\n/**\n * Wrapper around window.fetch that throws a NetworkError when appropriate\n */\nexport default function fetchWithNetworkError() {\n  return fetch(...arguments).catch(err => {\n    if (err.name === 'AbortError') {\n      throw err;\n    } else {\n      throw new NetworkError(err);\n    }\n  });\n}", "export default function has(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}", "import hasProperty from './hasProperty.js';\nclass ErrorWithCause extends Error {\n  constructor(message, options) {\n    super(message);\n    this.cause = options == null ? void 0 : options.cause;\n    if (this.cause && hasProperty(this.cause, 'isNetworkError')) {\n      this.isNetworkError = this.cause.isNetworkError;\n    } else {\n      this.isNetworkError = false;\n    }\n  }\n}\nexport default ErrorWithCause;", "export default function getSocketHost(url) {\n  var _regex$exec;\n  // get the host domain\n  const regex = /^(?:https?:\\/\\/|\\/\\/)?(?:[^@\\n]+@)?([^\\n]+)/i;\n  const host = (_regex$exec = regex.exec(url)) == null ? void 0 : _regex$exec[1];\n  const socketProtocol = /^http:\\/\\//i.test(url) ? 'ws' : 'wss';\n  return `${socketProtocol}://${host}`;\n}", "'use strict';\n\nclass AuthError extends Error {\n  constructor() {\n    super('Authorization required');\n    this.name = 'AuthError';\n\n    // we use a property because of instanceof is unsafe:\n    // https://github.com/transloadit/uppy/pull/4619#discussion_r1406225982\n    this.isAuthError = true;\n  }\n}\nexport default AuthError;", "function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nimport UserFacingApiError from '@uppy/utils/lib/UserFacingApiError';\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport pRetry, { AbortError } from 'p-retry';\nimport fetchWithNetworkError from '@uppy/utils/lib/fetchWithNetworkError';\nimport ErrorWithCause from '@uppy/utils/lib/ErrorWithCause';\nimport getSocketHost from '@uppy/utils/lib/getSocketHost';\nimport AuthError from './AuthError.js';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"4.4.2\"\n};\n// Remove the trailing slash so we can always safely append /xyz.\nfunction stripSlash(url) {\n  return url.replace(/\\/$/, '');\n}\nconst retryCount = 10; // set to a low number, like 2 to test manual user retries\nconst socketActivityTimeoutMs = 5 * 60 * 1000; // set to a low number like 10000 to test this\n\nexport const authErrorStatusCode = 401;\nclass HttpError extends Error {\n  constructor(_ref) {\n    let {\n      statusCode,\n      message\n    } = _ref;\n    super(message);\n    this.name = 'HttpError';\n    this.statusCode = statusCode;\n  }\n}\nasync function handleJSONResponse(res) {\n  if (res.status === authErrorStatusCode) {\n    throw new AuthError();\n  }\n  if (res.ok) {\n    return res.json();\n  }\n  let errMsg = `Failed request with status: ${res.status}. ${res.statusText}`;\n  let errData;\n  try {\n    errData = await res.json();\n    if (errData.message) errMsg = `${errMsg} message: ${errData.message}`;\n    if (errData.requestId) errMsg = `${errMsg} request-Id: ${errData.requestId}`;\n  } catch (cause) {\n    // if the response contains invalid JSON, let's ignore the error data\n    throw new Error(errMsg, {\n      cause\n    });\n  }\n  if (res.status >= 400 && res.status <= 499 && errData.message) {\n    throw new UserFacingApiError(errData.message);\n  }\n  throw new HttpError({\n    statusCode: res.status,\n    message: errMsg\n  });\n}\nfunction emitSocketProgress(uploader, progressData, file) {\n  const {\n    progress,\n    bytesUploaded,\n    bytesTotal\n  } = progressData;\n  if (progress) {\n    var _file$progress$upload;\n    uploader.uppy.log(`Upload progress: ${progress}`);\n    uploader.uppy.emit('upload-progress', file, {\n      uploadStarted: (_file$progress$upload = file.progress.uploadStarted) != null ? _file$progress$upload : 0,\n      bytesUploaded,\n      bytesTotal\n    });\n  }\n}\nvar _companionHeaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"companionHeaders\");\nvar _getUrl = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUrl\");\nvar _requestSocketToken = /*#__PURE__*/_classPrivateFieldLooseKey(\"requestSocketToken\");\nvar _awaitRemoteFileUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"awaitRemoteFileUpload\");\nexport default class RequestClient {\n  constructor(uppy, opts) {\n    /**\n     * This method will ensure a websocket for the specified file and returns a promise that resolves\n     * when the file has finished downloading, or rejects if it fails.\n     * It will retry if the websocket gets disconnected\n     */\n    Object.defineProperty(this, _awaitRemoteFileUpload, {\n      value: _awaitRemoteFileUpload2\n    });\n    Object.defineProperty(this, _getUrl, {\n      value: _getUrl2\n    });\n    Object.defineProperty(this, _companionHeaders, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _requestSocketToken, {\n      writable: true,\n      value: async _ref2 => {\n        var _file$remote;\n        let {\n          file,\n          postBody,\n          signal\n        } = _ref2;\n        if (((_file$remote = file.remote) == null ? void 0 : _file$remote.url) == null) {\n          throw new Error('Cannot connect to an undefined URL');\n        }\n        const res = await this.post(file.remote.url, {\n          ...file.remote.body,\n          ...postBody\n        }, {\n          signal\n        });\n        return res.token;\n      }\n    });\n    this.uppy = uppy;\n    this.opts = opts;\n    this.onReceiveResponse = this.onReceiveResponse.bind(this);\n    _classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders] = opts.companionHeaders;\n  }\n  setCompanionHeaders(headers) {\n    _classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders] = headers;\n  }\n  [Symbol.for('uppy test: getCompanionHeaders')]() {\n    return _classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders];\n  }\n  get hostname() {\n    const {\n      companion\n    } = this.uppy.getState();\n    const host = this.opts.companionUrl;\n    return stripSlash(companion && companion[host] ? companion[host] : host);\n  }\n  async headers(emptyBody) {\n    if (emptyBody === void 0) {\n      emptyBody = false;\n    }\n    const defaultHeaders = {\n      Accept: 'application/json',\n      ...(emptyBody ? undefined : {\n        // Passing those headers on requests with no data forces browsers to first make a preflight request.\n        'Content-Type': 'application/json'\n      })\n    };\n    return {\n      ...defaultHeaders,\n      ..._classPrivateFieldLooseBase(this, _companionHeaders)[_companionHeaders]\n    };\n  }\n  onReceiveResponse(res) {\n    const {\n      headers\n    } = res;\n    const state = this.uppy.getState();\n    const companion = state.companion || {};\n    const host = this.opts.companionUrl;\n\n    // Store the self-identified domain name for the Companion instance we just hit.\n    if (headers.has('i-am') && headers.get('i-am') !== companion[host]) {\n      this.uppy.setState({\n        companion: {\n          ...companion,\n          [host]: headers.get('i-am')\n        }\n      });\n    }\n  }\n  async request(_ref3) {\n    let {\n      path,\n      method = 'GET',\n      data,\n      skipPostResponse,\n      signal\n    } = _ref3;\n    try {\n      const headers = await this.headers(!data);\n      const response = await fetchWithNetworkError(_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path), {\n        method,\n        signal,\n        headers,\n        credentials: this.opts.companionCookiesRule || 'same-origin',\n        body: data ? JSON.stringify(data) : null\n      });\n      if (!skipPostResponse) this.onReceiveResponse(response);\n      return await handleJSONResponse(response);\n    } catch (err) {\n      // pass these through\n      if (err.isAuthError || err.name === 'UserFacingApiError' || err.name === 'AbortError') throw err;\n      throw new ErrorWithCause(`Could not ${method} ${_classPrivateFieldLooseBase(this, _getUrl)[_getUrl](path)}`, {\n        cause: err\n      });\n    }\n  }\n  async get(path, options) {\n    return this.request({\n      ...options,\n      path\n    });\n  }\n  async post(path, data, options) {\n    return this.request({\n      ...options,\n      path,\n      method: 'POST',\n      data\n    });\n  }\n  async delete(path, data, options) {\n    return this.request({\n      ...options,\n      path,\n      method: 'DELETE',\n      data\n    });\n  }\n\n  /**\n   * Remote uploading consists of two steps:\n   * 1. #requestSocketToken which starts the download/upload in companion and returns a unique token for the upload.\n   * Then companion will halt the upload until:\n   * 2. #awaitRemoteFileUpload is called, which will open/ensure a websocket connection towards companion, with the\n   * previously generated token provided. It returns a promise that will resolve/reject once the file has finished\n   * uploading or is otherwise done (failed, canceled)\n   */\n  async uploadRemoteFile(file, reqBody, options) {\n    var _this = this;\n    try {\n      const {\n        signal,\n        getQueue\n      } = options || {};\n      return await pRetry(async () => {\n        var _this$uppy$getFile;\n        // if we already have a serverToken, assume that we are resuming the existing server upload id\n        const existingServerToken = (_this$uppy$getFile = this.uppy.getFile(file.id)) == null ? void 0 : _this$uppy$getFile.serverToken;\n        if (existingServerToken != null) {\n          this.uppy.log(`Connecting to exiting websocket ${existingServerToken}`);\n          return _classPrivateFieldLooseBase(this, _awaitRemoteFileUpload)[_awaitRemoteFileUpload]({\n            file,\n            queue: getQueue(),\n            signal\n          });\n        }\n        const queueRequestSocketToken = getQueue().wrapPromiseFunction(async function () {\n          try {\n            return await _classPrivateFieldLooseBase(_this, _requestSocketToken)[_requestSocketToken](...arguments);\n          } catch (outerErr) {\n            // throwing AbortError will cause p-retry to stop retrying\n            if (outerErr.isAuthError) throw new AbortError(outerErr);\n            if (outerErr.cause == null) throw outerErr;\n            const err = outerErr.cause;\n            const isRetryableHttpError = () => [408, 409, 429, 418, 423].includes(err.statusCode) || err.statusCode >= 500 && err.statusCode <= 599 && ![501, 505].includes(err.statusCode);\n            if (err.name === 'HttpError' && !isRetryableHttpError()) throw new AbortError(err);\n\n            // p-retry will retry most other errors,\n            // but it will not retry TypeError (except network error TypeErrors)\n            throw err;\n          }\n        }, {\n          priority: -1\n        });\n        const serverToken = await queueRequestSocketToken({\n          file,\n          postBody: reqBody,\n          signal\n        }).abortOn(signal);\n        if (!this.uppy.getFile(file.id)) return undefined; // has file since been removed?\n\n        this.uppy.setFileState(file.id, {\n          serverToken\n        });\n        return _classPrivateFieldLooseBase(this, _awaitRemoteFileUpload)[_awaitRemoteFileUpload]({\n          file: this.uppy.getFile(file.id),\n          // re-fetching file because it might have changed in the meantime\n          queue: getQueue(),\n          signal\n        });\n      }, {\n        retries: retryCount,\n        signal,\n        onFailedAttempt: err => this.uppy.log(`Retrying upload due to: ${err.message}`, 'warning')\n      });\n    } catch (err) {\n      // this is a bit confusing, but note that an error with the `name` prop set to 'AbortError' (from AbortController)\n      // is not the same as `p-retry` `AbortError`\n      if (err.name === 'AbortError') {\n        // The file upload was aborted, it’s not an error\n        return undefined;\n      }\n      this.uppy.emit('upload-error', file, err);\n      throw err;\n    }\n  }\n}\nfunction _getUrl2(url) {\n  if (/^(https?:|)\\/\\//.test(url)) {\n    return url;\n  }\n  return `${this.hostname}/${url}`;\n}\nasync function _awaitRemoteFileUpload2(_ref4) {\n  let {\n    file,\n    queue,\n    signal\n  } = _ref4;\n  let removeEventHandlers;\n  const {\n    capabilities\n  } = this.uppy.getState();\n  try {\n    return await new Promise((resolve, reject) => {\n      const token = file.serverToken;\n      const host = getSocketHost(file.remote.companionUrl);\n      let socket;\n      let socketAbortController;\n      let activityTimeout;\n      let {\n        isPaused\n      } = file;\n      const socketSend = (action, payload) => {\n        if (socket == null || socket.readyState !== socket.OPEN) {\n          var _socket;\n          this.uppy.log(`Cannot send \"${action}\" to socket ${file.id} because the socket state was ${String((_socket = socket) == null ? void 0 : _socket.readyState)}`, 'warning');\n          return;\n        }\n        socket.send(JSON.stringify({\n          action,\n          payload: payload != null ? payload : {}\n        }));\n      };\n      function sendState() {\n        if (!capabilities.resumableUploads) return;\n        if (isPaused) socketSend('pause');else socketSend('resume');\n      }\n      const createWebsocket = async () => {\n        if (socketAbortController) socketAbortController.abort();\n        socketAbortController = new AbortController();\n        const onFatalError = err => {\n          var _socketAbortControlle;\n          // Remove the serverToken so that a new one will be created for the retry.\n          this.uppy.setFileState(file.id, {\n            serverToken: null\n          });\n          (_socketAbortControlle = socketAbortController) == null || _socketAbortControlle.abort == null || _socketAbortControlle.abort();\n          reject(err);\n        };\n\n        // todo instead implement the ability for users to cancel / retry *currently uploading files* in the UI\n        function resetActivityTimeout() {\n          clearTimeout(activityTimeout);\n          if (isPaused) return;\n          activityTimeout = setTimeout(() => onFatalError(new Error('Timeout waiting for message from Companion socket')), socketActivityTimeoutMs);\n        }\n        try {\n          await queue.wrapPromiseFunction(async () => {\n            const reconnectWebsocket = async () =>\n            // eslint-disable-next-line promise/param-names\n            new Promise((_, rejectSocket) => {\n              socket = new WebSocket(`${host}/api/${token}`);\n              resetActivityTimeout();\n              socket.addEventListener('close', () => {\n                socket = undefined;\n                rejectSocket(new Error('Socket closed unexpectedly'));\n              });\n              socket.addEventListener('error', error => {\n                var _socket2;\n                this.uppy.log(`Companion socket error ${JSON.stringify(error)}, closing socket`, 'warning');\n                (_socket2 = socket) == null || _socket2.close(); // will 'close' event to be emitted\n              });\n              socket.addEventListener('open', () => {\n                sendState();\n              });\n              socket.addEventListener('message', e => {\n                resetActivityTimeout();\n                try {\n                  const {\n                    action,\n                    payload\n                  } = JSON.parse(e.data);\n                  switch (action) {\n                    case 'progress':\n                      {\n                        emitSocketProgress(this, payload, this.uppy.getFile(file.id));\n                        break;\n                      }\n                    case 'success':\n                      {\n                        var _payload$response, _payload$response$sta, _payload$response2, _socketAbortControlle2;\n                        // payload.response is sent from companion for xhr-upload (aka uploadMultipart in companion) and\n                        // s3 multipart (aka uploadS3Multipart)\n                        // but not for tus/transloadit (aka uploadTus)\n                        // responseText is a string which may or may not be in JSON format\n                        // this means that an upload destination of xhr or s3 multipart MUST respond with valid JSON\n                        // to companion, or the JSON.parse will crash\n                        const text = (_payload$response = payload.response) == null ? void 0 : _payload$response.responseText;\n                        this.uppy.emit('upload-success', this.uppy.getFile(file.id), {\n                          uploadURL: payload.url,\n                          status: (_payload$response$sta = (_payload$response2 = payload.response) == null ? void 0 : _payload$response2.status) != null ? _payload$response$sta : 200,\n                          body: text ? JSON.parse(text) : undefined\n                        });\n                        (_socketAbortControlle2 = socketAbortController) == null || _socketAbortControlle2.abort == null || _socketAbortControlle2.abort();\n                        resolve();\n                        break;\n                      }\n                    case 'error':\n                      {\n                        const {\n                          message\n                        } = payload.error;\n                        throw Object.assign(new Error(message), {\n                          cause: payload.error\n                        });\n                      }\n                    default:\n                      this.uppy.log(`Companion socket unknown action ${action}`, 'warning');\n                  }\n                } catch (err) {\n                  onFatalError(err);\n                }\n              });\n              const closeSocket = () => {\n                this.uppy.log(`Closing socket ${file.id}`);\n                clearTimeout(activityTimeout);\n                if (socket) socket.close();\n                socket = undefined;\n              };\n              socketAbortController.signal.addEventListener('abort', () => {\n                closeSocket();\n              });\n            });\n            await pRetry(reconnectWebsocket, {\n              retries: retryCount,\n              signal: socketAbortController.signal,\n              onFailedAttempt: () => {\n                if (socketAbortController.signal.aborted) return; // don't log in this case\n                this.uppy.log(`Retrying websocket ${file.id}`);\n              }\n            });\n          })().abortOn(socketAbortController.signal);\n        } catch (err) {\n          if (socketAbortController.signal.aborted) return;\n          onFatalError(err);\n        }\n      };\n      const pause = newPausedState => {\n        if (!capabilities.resumableUploads) return;\n        isPaused = newPausedState;\n        if (socket) sendState();\n      };\n      const onFileRemove = targetFile => {\n        var _socketAbortControlle3;\n        if (!capabilities.individualCancellation) return;\n        if (targetFile.id !== file.id) return;\n        socketSend('cancel');\n        (_socketAbortControlle3 = socketAbortController) == null || _socketAbortControlle3.abort == null || _socketAbortControlle3.abort();\n        this.uppy.log(`upload ${file.id} was removed`);\n        resolve();\n      };\n      const onCancelAll = () => {\n        var _socketAbortControlle4;\n        socketSend('cancel');\n        (_socketAbortControlle4 = socketAbortController) == null || _socketAbortControlle4.abort == null || _socketAbortControlle4.abort();\n        this.uppy.log(`upload ${file.id} was canceled`);\n        resolve();\n      };\n      const onFilePausedChange = (targetFile, newPausedState) => {\n        if ((targetFile == null ? void 0 : targetFile.id) !== file.id) return;\n        pause(newPausedState);\n      };\n      const onPauseAll = () => pause(true);\n      const onResumeAll = () => pause(false);\n      this.uppy.on('file-removed', onFileRemove);\n      this.uppy.on('cancel-all', onCancelAll);\n      this.uppy.on('upload-pause', onFilePausedChange);\n      this.uppy.on('pause-all', onPauseAll);\n      this.uppy.on('resume-all', onResumeAll);\n      removeEventHandlers = () => {\n        this.uppy.off('file-removed', onFileRemove);\n        this.uppy.off('cancel-all', onCancelAll);\n        this.uppy.off('upload-pause', onFilePausedChange);\n        this.uppy.off('pause-all', onPauseAll);\n        this.uppy.off('resume-all', onResumeAll);\n      };\n      signal.addEventListener('abort', () => {\n        var _socketAbortControlle5;\n        (_socketAbortControlle5 = socketAbortController) == null || _socketAbortControlle5.abort();\n      });\n      createWebsocket();\n    });\n  } finally {\n    // @ts-expect-error used before defined\n    removeEventHandlers == null || removeEventHandlers();\n  }\n}\nRequestClient.VERSION = packageJson.version;", "function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nimport RequestClient, { authErrorStatusCode } from './RequestClient.js';\nimport { isOriginAllowed } from './getAllowedHosts.js';\nconst getName = id => {\n  return id.split('-').map(s => s.charAt(0).toUpperCase() + s.slice(1)).join(' ');\n};\nfunction getOrigin() {\n  // eslint-disable-next-line no-restricted-globals\n  return location.origin;\n}\nvar _refreshingTokenPromise = /*#__PURE__*/_classPrivateFieldLooseKey(\"refreshingTokenPromise\");\nvar _getAuthToken = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAuthToken\");\nvar _getPlugin = /*#__PURE__*/_classPrivateFieldLooseKey(\"getPlugin\");\nexport default class Provider extends RequestClient {\n  constructor(uppy, opts) {\n    super(uppy, opts);\n    Object.defineProperty(this, _getPlugin, {\n      value: _getPlugin2\n    });\n    Object.defineProperty(this, _getAuthToken, {\n      value: _getAuthToken2\n    });\n    Object.defineProperty(this, _refreshingTokenPromise, {\n      writable: true,\n      value: void 0\n    });\n    this.provider = opts.provider;\n    this.id = this.provider;\n    this.name = this.opts.name || getName(this.id);\n    this.pluginId = this.opts.pluginId;\n    this.tokenKey = `companion-${this.pluginId}-auth-token`;\n    this.companionKeysParams = this.opts.companionKeysParams;\n    this.preAuthToken = null;\n    this.supportsRefreshToken = !!opts.supportsRefreshToken;\n  }\n  async headers() {\n    const [headers, token] = await Promise.all([super.headers(), _classPrivateFieldLooseBase(this, _getAuthToken)[_getAuthToken]()]);\n    const authHeaders = {};\n    if (token) {\n      authHeaders['uppy-auth-token'] = token;\n    }\n    if (this.companionKeysParams) {\n      authHeaders['uppy-credentials-params'] = btoa(JSON.stringify({\n        params: this.companionKeysParams\n      }));\n    }\n    return {\n      ...headers,\n      ...authHeaders\n    };\n  }\n  onReceiveResponse(response) {\n    super.onReceiveResponse(response);\n    const plugin = _classPrivateFieldLooseBase(this, _getPlugin)[_getPlugin]();\n    const oldAuthenticated = plugin.getPluginState().authenticated;\n    const authenticated = oldAuthenticated ? response.status !== authErrorStatusCode : response.status < 400;\n    plugin.setPluginState({\n      authenticated\n    });\n    return response;\n  }\n  async setAuthToken(token) {\n    return _classPrivateFieldLooseBase(this, _getPlugin)[_getPlugin]().storage.setItem(this.tokenKey, token);\n  }\n  async removeAuthToken() {\n    return _classPrivateFieldLooseBase(this, _getPlugin)[_getPlugin]().storage.removeItem(this.tokenKey);\n  }\n  /**\n   * Ensure we have a preauth token if necessary. Attempts to fetch one if we don't,\n   * or rejects if loading one fails.\n   */\n  async ensurePreAuth() {\n    if (this.companionKeysParams && !this.preAuthToken) {\n      await this.fetchPreAuthToken();\n      if (!this.preAuthToken) {\n        throw new Error('Could not load authentication data required for third-party login. Please try again later.');\n      }\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this, @typescript-eslint/no-unused-vars\n  authQuery(data) {\n    return {};\n  }\n  authUrl(_ref) {\n    let {\n      authFormData,\n      query\n    } = _ref;\n    const params = new URLSearchParams({\n      ...query,\n      // This is only used for Companion instances configured to accept multiple origins.\n      state: btoa(JSON.stringify({\n        origin: getOrigin()\n      })),\n      ...this.authQuery({\n        authFormData\n      })\n    });\n    if (this.preAuthToken) {\n      params.set('uppyPreAuthToken', this.preAuthToken);\n    }\n    return `${this.hostname}/${this.id}/connect?${params}`;\n  }\n  async loginSimpleAuth(_ref2) {\n    let {\n      uppyVersions,\n      authFormData,\n      signal\n    } = _ref2;\n    const response = await this.post(`${this.id}/simple-auth`, {\n      form: authFormData\n    }, {\n      qs: {\n        uppyVersions\n      },\n      signal\n    });\n    this.setAuthToken(response.uppyAuthToken);\n  }\n  async loginOAuth(_ref3) {\n    let {\n      uppyVersions,\n      authFormData,\n      signal\n    } = _ref3;\n    await this.ensurePreAuth();\n    signal.throwIfAborted();\n    const link = this.authUrl({\n      query: {\n        uppyVersions\n      },\n      authFormData\n    });\n    const authWindow = window.open(link, '_blank');\n    let interval;\n    let handleMessage;\n    try {\n      return await new Promise((resolve, reject) => {\n        handleMessage = e => {\n          if (e.source !== authWindow) {\n            let jsonData = '';\n            try {\n              // TODO improve our uppy logger so that it can take an arbitrary number of arguments,\n              // each either objects, errors or strings,\n              // then we don’t have to manually do these things like json stringify when logging.\n              // the logger should never throw an error.\n              jsonData = JSON.stringify(e.data);\n            } catch (err) {\n              // in case JSON.stringify fails (ignored)\n            }\n            this.uppy.log(`ignoring event from unknown source ${jsonData}`, 'warning');\n            return;\n          }\n          const {\n            companionAllowedHosts\n          } = _classPrivateFieldLooseBase(this, _getPlugin)[_getPlugin]().opts;\n          if (!isOriginAllowed(e.origin, companionAllowedHosts)) {\n            this.uppy.log(`ignoring event from ${e.origin} vs allowed pattern ${companionAllowedHosts}`, 'warning');\n            // We cannot reject here because the page might send events from other origins\n            // before sending the \"real\" auth completed event.\n            // for example Box has a \"Pendo\" tool that sends events to the opener\n            // https://github.com/transloadit/uppy/pull/5719\n            return;\n          }\n\n          // Check if it's a string before doing the JSON.parse to maintain support\n          // for older Companion versions that used object references\n          const data = typeof e.data === 'string' ? JSON.parse(e.data) : e.data;\n          if (data.error) {\n            const {\n              uppy\n            } = this;\n            const message = uppy.i18n('authAborted');\n            uppy.info({\n              message\n            }, 'warning', 5000);\n            reject(new Error('auth aborted'));\n            return;\n          }\n          if (!data.token) {\n            reject(new Error('did not receive token from auth window'));\n            return;\n          }\n          resolve(this.setAuthToken(data.token));\n        };\n\n        // poll for user closure of the window, so we can reject when it happens\n        if (authWindow) {\n          interval = window.setInterval(() => {\n            if (authWindow.closed) {\n              reject(new Error('Auth window was closed by the user'));\n            }\n          }, 500);\n        }\n        signal.addEventListener('abort', () => reject(new Error('Aborted')));\n        window.addEventListener('message', handleMessage);\n      });\n    } finally {\n      // cleanup:\n      authWindow == null || authWindow.close();\n      window.clearInterval(interval);\n      if (handleMessage) window.removeEventListener('message', handleMessage);\n    }\n  }\n  async login(_ref4) {\n    let {\n      uppyVersions,\n      authFormData,\n      signal\n    } = _ref4;\n    return this.loginOAuth({\n      uppyVersions,\n      authFormData,\n      signal\n    });\n  }\n  refreshTokenUrl() {\n    return `${this.hostname}/${this.id}/refresh-token`;\n  }\n  fileUrl(id) {\n    return `${this.hostname}/${this.id}/get/${id}`;\n  }\n  async request() {\n    await _classPrivateFieldLooseBase(this, _refreshingTokenPromise)[_refreshingTokenPromise];\n    try {\n      // to test simulate access token expired (leading to a token token refresh),\n      // see mockAccessTokenExpiredError in companion/drive.\n      // If you want to test refresh token *and* access token invalid, do this for example with Google Drive:\n      // While uploading, go to your google account settings,\n      // \"Third-party apps & services\", then click \"Companion\" and \"Remove access\".\n\n      return await super.request(...arguments);\n    } catch (err) {\n      if (!this.supportsRefreshToken) throw err;\n      // only handle auth errors (401 from provider), and only handle them if we have a (refresh) token\n      const authTokenAfter = await _classPrivateFieldLooseBase(this, _getAuthToken)[_getAuthToken]();\n      if (!err.isAuthError || !authTokenAfter) throw err;\n      if (_classPrivateFieldLooseBase(this, _refreshingTokenPromise)[_refreshingTokenPromise] == null) {\n        // Many provider requests may be starting at once, however refresh token should only be called once.\n        // Once a refresh token operation has started, we need all other request to wait for this operation (atomically)\n        _classPrivateFieldLooseBase(this, _refreshingTokenPromise)[_refreshingTokenPromise] = (async () => {\n          try {\n            this.uppy.log(`[CompanionClient] Refreshing expired auth token`);\n            const response = await super.request({\n              path: this.refreshTokenUrl(),\n              method: 'POST'\n            });\n            await this.setAuthToken(response.uppyAuthToken);\n          } catch (refreshTokenErr) {\n            if (refreshTokenErr.isAuthError) {\n              // if refresh-token has failed with auth error, delete token, so we don't keep trying to refresh in future\n              await this.removeAuthToken();\n            }\n            throw err;\n          } finally {\n            _classPrivateFieldLooseBase(this, _refreshingTokenPromise)[_refreshingTokenPromise] = undefined;\n          }\n        })();\n      }\n      await _classPrivateFieldLooseBase(this, _refreshingTokenPromise)[_refreshingTokenPromise];\n\n      // now retry the request with our new refresh token\n      return super.request(...arguments);\n    }\n  }\n  async fetchPreAuthToken() {\n    if (!this.companionKeysParams) {\n      return;\n    }\n    try {\n      const res = await this.post(`${this.id}/preauth/`, {\n        params: this.companionKeysParams\n      });\n      this.preAuthToken = res.token;\n    } catch (err) {\n      this.uppy.log(`[CompanionClient] unable to fetch preAuthToken ${err}`, 'warning');\n    }\n  }\n  list(directory, options) {\n    return this.get(`${this.id}/list/${directory || ''}`, options);\n  }\n  async logout(options) {\n    const response = await this.get(`${this.id}/logout`, options);\n    await this.removeAuthToken();\n    return response;\n  }\n}\nasync function _getAuthToken2() {\n  return _classPrivateFieldLooseBase(this, _getPlugin)[_getPlugin]().storage.getItem(this.tokenKey);\n}\nfunction _getPlugin2() {\n  const plugin = this.uppy.getPlugin(this.pluginId);\n  if (plugin == null) throw new Error('Plugin was nullish');\n  return plugin;\n}", "function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nvar _uppy = /*#__PURE__*/_classPrivateFieldLooseKey(\"uppy\");\nvar _events = /*#__PURE__*/_classPrivateFieldLooseKey(\"events\");\n/**\n * Create a wrapper around an event emitter with a `remove` method to remove\n * all events that were added using the wrapped emitter.\n */\nexport default class EventManager {\n  constructor(uppy) {\n    Object.defineProperty(this, _uppy, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _events, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldLooseBase(this, _uppy)[_uppy] = uppy;\n  }\n  on(event, fn) {\n    _classPrivateFieldLooseBase(this, _events)[_events].push([event, fn]);\n    return _classPrivateFieldLooseBase(this, _uppy)[_uppy].on(event, fn);\n  }\n  remove() {\n    for (const [event, fn] of _classPrivateFieldLooseBase(this, _events)[_events].splice(0)) {\n      _classPrivateFieldLooseBase(this, _uppy)[_uppy].off(event, fn);\n    }\n  }\n  onFilePause(fileID, cb) {\n    this.on('upload-pause', (file, isPaused) => {\n      if (fileID === (file == null ? void 0 : file.id)) {\n        cb(isPaused);\n      }\n    });\n  }\n  onFileRemove(fileID, cb) {\n    this.on('file-removed', file => {\n      if (fileID === file.id) cb(file.id);\n    });\n  }\n  onPause(fileID, cb) {\n    this.on('upload-pause', (file, isPaused) => {\n      if (fileID === (file == null ? void 0 : file.id)) {\n        // const isPaused = this.#uppy.pauseResume(fileID)\n        cb(isPaused);\n      }\n    });\n  }\n  onRetry(fileID, cb) {\n    this.on('upload-retry', file => {\n      if (fileID === (file == null ? void 0 : file.id)) {\n        cb();\n      }\n    });\n  }\n  onRetryAll(fileID, cb) {\n    this.on('retry-all', () => {\n      if (!_classPrivateFieldLooseBase(this, _uppy)[_uppy].getFile(fileID)) return;\n      cb();\n    });\n  }\n  onPauseAll(fileID, cb) {\n    this.on('pause-all', () => {\n      if (!_classPrivateFieldLooseBase(this, _uppy)[_uppy].getFile(fileID)) return;\n      cb();\n    });\n  }\n  onCancelAll(fileID, eventHandler) {\n    var _this = this;\n    this.on('cancel-all', function () {\n      if (!_classPrivateFieldLooseBase(_this, _uppy)[_uppy].getFile(fileID)) return;\n      eventHandler(...arguments);\n    });\n  }\n  onResumeAll(fileID, cb) {\n    this.on('resume-all', () => {\n      if (!_classPrivateFieldLooseBase(this, _uppy)[_uppy].getFile(fileID)) return;\n      cb();\n    });\n  }\n}", "function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nfunction createCancelError(cause) {\n  return new Error('Cancelled', {\n    cause\n  });\n}\nfunction abortOn(signal) {\n  if (signal != null) {\n    var _this$then;\n    const abortPromise = () => this.abort(signal.reason);\n    signal.addEventListener('abort', abortPromise, {\n      once: true\n    });\n    const removeAbortListener = () => {\n      signal.removeEventListener('abort', abortPromise);\n    };\n    (_this$then = this.then) == null || _this$then.call(this, removeAbortListener, removeAbortListener);\n  }\n  return this;\n}\nvar _activeRequests = /*#__PURE__*/_classPrivateFieldLooseKey(\"activeRequests\");\nvar _queuedHandlers = /*#__PURE__*/_classPrivateFieldLooseKey(\"queuedHandlers\");\nvar _paused = /*#__PURE__*/_classPrivateFieldLooseKey(\"paused\");\nvar _pauseTimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"pauseTimer\");\nvar _downLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"downLimit\");\nvar _upperLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"upperLimit\");\nvar _rateLimitingTimer = /*#__PURE__*/_classPrivateFieldLooseKey(\"rateLimitingTimer\");\nvar _call = /*#__PURE__*/_classPrivateFieldLooseKey(\"call\");\nvar _queueNext = /*#__PURE__*/_classPrivateFieldLooseKey(\"queueNext\");\nvar _next = /*#__PURE__*/_classPrivateFieldLooseKey(\"next\");\nvar _queue = /*#__PURE__*/_classPrivateFieldLooseKey(\"queue\");\nvar _dequeue = /*#__PURE__*/_classPrivateFieldLooseKey(\"dequeue\");\nvar _resume = /*#__PURE__*/_classPrivateFieldLooseKey(\"resume\");\nvar _increaseLimit = /*#__PURE__*/_classPrivateFieldLooseKey(\"increaseLimit\");\nexport class RateLimitedQueue {\n  constructor(limit) {\n    Object.defineProperty(this, _dequeue, {\n      value: _dequeue2\n    });\n    Object.defineProperty(this, _queue, {\n      value: _queue2\n    });\n    Object.defineProperty(this, _next, {\n      value: _next2\n    });\n    Object.defineProperty(this, _queueNext, {\n      value: _queueNext2\n    });\n    Object.defineProperty(this, _call, {\n      value: _call2\n    });\n    Object.defineProperty(this, _activeRequests, {\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, _queuedHandlers, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _paused, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _pauseTimer, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _downLimit, {\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, _upperLimit, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _rateLimitingTimer, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _resume, {\n      writable: true,\n      value: () => this.resume()\n    });\n    Object.defineProperty(this, _increaseLimit, {\n      writable: true,\n      value: () => {\n        if (_classPrivateFieldLooseBase(this, _paused)[_paused]) {\n          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 0);\n          return;\n        }\n        _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = this.limit;\n        this.limit = Math.ceil((_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] + _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]) / 2);\n        for (let i = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit]; i <= this.limit; i++) {\n          _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n        }\n        if (_classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] - _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] > 3) {\n          _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], 2000);\n        } else {\n          _classPrivateFieldLooseBase(this, _downLimit)[_downLimit] = Math.floor(_classPrivateFieldLooseBase(this, _downLimit)[_downLimit] / 2);\n        }\n      }\n    });\n    if (typeof limit !== 'number' || limit === 0) {\n      this.limit = Infinity;\n    } else {\n      this.limit = limit;\n    }\n  }\n  run(fn, queueOptions) {\n    if (!_classPrivateFieldLooseBase(this, _paused)[_paused] && _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] < this.limit) {\n      return _classPrivateFieldLooseBase(this, _call)[_call](fn);\n    }\n    return _classPrivateFieldLooseBase(this, _queue)[_queue](fn, queueOptions);\n  }\n  wrapSyncFunction(fn, queueOptions) {\n    var _this = this;\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const queuedRequest = _this.run(() => {\n        fn(...args);\n        queueMicrotask(() => queuedRequest.done());\n        return () => {};\n      }, queueOptions);\n      return {\n        abortOn,\n        abort() {\n          queuedRequest.abort();\n        }\n      };\n    };\n  }\n  wrapPromiseFunction(fn, queueOptions) {\n    var _this2 = this;\n    return function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      let queuedRequest;\n      const outerPromise = new Promise((resolve, reject) => {\n        queuedRequest = _this2.run(() => {\n          let cancelError;\n          let innerPromise;\n          try {\n            innerPromise = Promise.resolve(fn(...args));\n          } catch (err) {\n            innerPromise = Promise.reject(err);\n          }\n          innerPromise.then(result => {\n            if (cancelError) {\n              reject(cancelError);\n            } else {\n              queuedRequest.done();\n              resolve(result);\n            }\n          }, err => {\n            if (cancelError) {\n              reject(cancelError);\n            } else {\n              queuedRequest.done();\n              reject(err);\n            }\n          });\n          return cause => {\n            cancelError = createCancelError(cause);\n          };\n        }, queueOptions);\n      });\n      outerPromise.abort = cause => {\n        queuedRequest.abort(cause);\n      };\n      outerPromise.abortOn = abortOn;\n      return outerPromise;\n    };\n  }\n  resume() {\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = false;\n    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);\n    for (let i = 0; i < this.limit; i++) {\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    }\n  }\n  /**\n   * Freezes the queue for a while or indefinitely.\n   *\n   * @param {number | null } [duration] Duration for the pause to happen, in milliseconds.\n   *                                    If omitted, the queue won't resume automatically.\n   */\n  pause(duration) {\n    if (duration === void 0) {\n      duration = null;\n    }\n    _classPrivateFieldLooseBase(this, _paused)[_paused] = true;\n    clearTimeout(_classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer]);\n    if (duration != null) {\n      _classPrivateFieldLooseBase(this, _pauseTimer)[_pauseTimer] = setTimeout(_classPrivateFieldLooseBase(this, _resume)[_resume], duration);\n    }\n  }\n\n  /**\n   * Pauses the queue for a duration, and lower the limit of concurrent requests\n   * when the queue resumes. When the queue resumes, it tries to progressively\n   * increase the limit in `this.#increaseLimit` until another call is made to\n   * `this.rateLimit`.\n   * Call this function when using the RateLimitedQueue for network requests and\n   * the remote server responds with 429 HTTP code.\n   *\n   * @param {number} duration in milliseconds.\n   */\n  rateLimit(duration) {\n    clearTimeout(_classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer]);\n    this.pause(duration);\n    if (this.limit > 1 && Number.isFinite(this.limit)) {\n      _classPrivateFieldLooseBase(this, _upperLimit)[_upperLimit] = this.limit - 1;\n      this.limit = _classPrivateFieldLooseBase(this, _downLimit)[_downLimit];\n      _classPrivateFieldLooseBase(this, _rateLimitingTimer)[_rateLimitingTimer] = setTimeout(_classPrivateFieldLooseBase(this, _increaseLimit)[_increaseLimit], duration);\n    }\n  }\n  get isPaused() {\n    return _classPrivateFieldLooseBase(this, _paused)[_paused];\n  }\n}\nfunction _call2(fn) {\n  _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] += 1;\n  let done = false;\n  let cancelActive;\n  try {\n    cancelActive = fn();\n  } catch (err) {\n    _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n    throw err;\n  }\n  return {\n    abort: cause => {\n      if (done) return;\n      done = true;\n      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n      cancelActive == null || cancelActive(cause);\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    },\n    done: () => {\n      if (done) return;\n      done = true;\n      _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] -= 1;\n      _classPrivateFieldLooseBase(this, _queueNext)[_queueNext]();\n    }\n  };\n}\nfunction _queueNext2() {\n  // Do it soon but not immediately, this allows clearing out the entire queue synchronously\n  // one by one without continuously _advancing_ it (and starting new tasks before immediately\n  // aborting them)\n  queueMicrotask(() => _classPrivateFieldLooseBase(this, _next)[_next]());\n}\nfunction _next2() {\n  if (_classPrivateFieldLooseBase(this, _paused)[_paused] || _classPrivateFieldLooseBase(this, _activeRequests)[_activeRequests] >= this.limit) {\n    return;\n  }\n  if (_classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].length === 0) {\n    return;\n  }\n\n  // Dispatch the next request, and update the abort/done handlers\n  // so that cancelling it does the Right Thing (and doesn't just try\n  // to dequeue an already-running request).\n  const next = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].shift();\n  if (next == null) {\n    throw new Error('Invariant violation: next is null');\n  }\n  const handler = _classPrivateFieldLooseBase(this, _call)[_call](next.fn);\n  next.abort = handler.abort;\n  next.done = handler.done;\n}\nfunction _queue2(fn, options) {\n  const handler = {\n    fn,\n    priority: (options == null ? void 0 : options.priority) || 0,\n    abort: () => {\n      _classPrivateFieldLooseBase(this, _dequeue)[_dequeue](handler);\n    },\n    done: () => {\n      throw new Error('Cannot mark a queued request as done: this indicates a bug');\n    }\n  };\n  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].findIndex(other => {\n    return handler.priority > other.priority;\n  });\n  if (index === -1) {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].push(handler);\n  } else {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 0, handler);\n  }\n  return handler;\n}\nfunction _dequeue2(handler) {\n  const index = _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].indexOf(handler);\n  if (index !== -1) {\n    _classPrivateFieldLooseBase(this, _queuedHandlers)[_queuedHandlers].splice(index, 1);\n  }\n}\nexport const internalRateLimitedQueue = Symbol('__queue');", "export function filterNonFailedFiles(files) {\n  const hasError = file => 'error' in file && !!file.error;\n  return files.filter(file => !hasError(file));\n}\n\n// Don't double-emit upload-started for Golden Retriever-restored files that were already started\nexport function filterFilesToEmitUploadStarted(files) {\n  return files.filter(file => {\n    var _file$progress;\n    return !((_file$progress = file.progress) != null && _file$progress.uploadStarted) || !file.isRestored;\n  });\n}", "import hasOwnProperty from './hasProperty.js';\n/**\n * Little AbortController proxy module so we can swap out the implementation easily later.\n */\nexport const {\n  AbortController\n} = globalThis;\nexport const {\n  AbortSignal\n} = globalThis;\nexport const createAbortError = function (message, options) {\n  if (message === void 0) {\n    message = 'Aborted';\n  }\n  const err = new DOMException(message, 'AbortError');\n  if (options != null && hasOwnProperty(options, 'cause')) {\n    Object.defineProperty(err, 'cause', {\n      // @ts-expect-error TS is drunk\n      __proto__: null,\n      configurable: true,\n      writable: true,\n      value: options.cause\n    });\n  }\n  return err;\n};", "export default function getAllowedMetaFields(fields, meta) {\n  if (fields === true) {\n    return Object.keys(meta);\n  }\n  if (Array.isArray(fields)) {\n    return fields;\n  }\n  return [];\n}", "function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nimport { AbortController } from '@uppy/utils/lib/AbortController';\nconst MB = 1024 * 1024;\nconst defaultOptions = {\n  getChunkSize(file) {\n    return Math.ceil(file.size / 10000);\n  },\n  onProgress() {},\n  onPartComplete() {},\n  onSuccess() {},\n  onError(err) {\n    throw err;\n  }\n};\nfunction ensureInt(value) {\n  if (typeof value === 'string') {\n    // @ts-expect-error TS is not able to recognize it's fine.\n    return parseInt(value, 10);\n  }\n  if (typeof value === 'number') {\n    // @ts-expect-error TS is not able to recognize it's fine.\n    return value;\n  }\n  throw new TypeError('Expected a number');\n}\nexport const pausingUploadReason = Symbol('pausing upload, not an actual error');\n\n/**\n * A MultipartUploader instance is used per file upload to determine whether a\n * upload should be done as multipart or as a regular S3 upload\n * (based on the user-provided `shouldUseMultipart` option value) and to manage\n * the chunk splitting.\n */\nvar _abortController = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortController\");\nvar _chunks = /*#__PURE__*/_classPrivateFieldLooseKey(\"chunks\");\nvar _chunkState = /*#__PURE__*/_classPrivateFieldLooseKey(\"chunkState\");\nvar _data = /*#__PURE__*/_classPrivateFieldLooseKey(\"data\");\nvar _file = /*#__PURE__*/_classPrivateFieldLooseKey(\"file\");\nvar _uploadHasStarted = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadHasStarted\");\nvar _onError = /*#__PURE__*/_classPrivateFieldLooseKey(\"onError\");\nvar _onSuccess = /*#__PURE__*/_classPrivateFieldLooseKey(\"onSuccess\");\nvar _shouldUseMultipart = /*#__PURE__*/_classPrivateFieldLooseKey(\"shouldUseMultipart\");\nvar _isRestoring = /*#__PURE__*/_classPrivateFieldLooseKey(\"isRestoring\");\nvar _onReject = /*#__PURE__*/_classPrivateFieldLooseKey(\"onReject\");\nvar _maxMultipartParts = /*#__PURE__*/_classPrivateFieldLooseKey(\"maxMultipartParts\");\nvar _minPartSize = /*#__PURE__*/_classPrivateFieldLooseKey(\"minPartSize\");\nvar _initChunks = /*#__PURE__*/_classPrivateFieldLooseKey(\"initChunks\");\nvar _createUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createUpload\");\nvar _resumeUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"resumeUpload\");\nvar _onPartProgress = /*#__PURE__*/_classPrivateFieldLooseKey(\"onPartProgress\");\nvar _onPartComplete = /*#__PURE__*/_classPrivateFieldLooseKey(\"onPartComplete\");\nvar _abortUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortUpload\");\nclass MultipartUploader {\n  constructor(data, options) {\n    var _this$options, _this$options$getChun;\n    Object.defineProperty(this, _abortUpload, {\n      value: _abortUpload2\n    });\n    Object.defineProperty(this, _resumeUpload, {\n      value: _resumeUpload2\n    });\n    Object.defineProperty(this, _createUpload, {\n      value: _createUpload2\n    });\n    // initChunks checks the user preference for using multipart uploads (opts.shouldUseMultipart)\n    // and calculates the optimal part size. When using multipart part uploads every part except for the last has\n    // to be at least 5 MB and there can be no more than 10K parts.\n    // This means we sometimes need to change the preferred part size from the user in order to meet these requirements.\n    Object.defineProperty(this, _initChunks, {\n      value: _initChunks2\n    });\n    Object.defineProperty(this, _abortController, {\n      writable: true,\n      value: new AbortController()\n    });\n    Object.defineProperty(this, _chunks, {\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, _chunkState, {\n      writable: true,\n      value: []\n    });\n    /**\n     * The (un-chunked) data to upload.\n     */\n    Object.defineProperty(this, _data, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _file, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _uploadHasStarted, {\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, _onError, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _onSuccess, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _shouldUseMultipart, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _isRestoring, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _onReject, {\n      writable: true,\n      value: err => (err == null ? void 0 : err.cause) === pausingUploadReason ? null : _classPrivateFieldLooseBase(this, _onError)[_onError](err)\n    });\n    Object.defineProperty(this, _maxMultipartParts, {\n      writable: true,\n      value: 10000\n    });\n    Object.defineProperty(this, _minPartSize, {\n      writable: true,\n      value: 5 * MB\n    });\n    Object.defineProperty(this, _onPartProgress, {\n      writable: true,\n      value: index => ev => {\n        if (!ev.lengthComputable) return;\n        _classPrivateFieldLooseBase(this, _chunkState)[_chunkState][index].uploaded = ensureInt(ev.loaded);\n        const totalUploaded = _classPrivateFieldLooseBase(this, _chunkState)[_chunkState].reduce((n, c) => n + c.uploaded, 0);\n        this.options.onProgress(totalUploaded, _classPrivateFieldLooseBase(this, _data)[_data].size);\n      }\n    });\n    Object.defineProperty(this, _onPartComplete, {\n      writable: true,\n      value: index => etag => {\n        // This avoids the net::ERR_OUT_OF_MEMORY in Chromium Browsers.\n        _classPrivateFieldLooseBase(this, _chunks)[_chunks][index] = null;\n        _classPrivateFieldLooseBase(this, _chunkState)[_chunkState][index].etag = etag;\n        _classPrivateFieldLooseBase(this, _chunkState)[_chunkState][index].done = true;\n        const part = {\n          PartNumber: index + 1,\n          ETag: etag\n        };\n        this.options.onPartComplete(part);\n      }\n    });\n    this.options = {\n      ...defaultOptions,\n      ...options\n    };\n    // Use default `getChunkSize` if it was null or something\n    (_this$options$getChun = (_this$options = this.options).getChunkSize) != null ? _this$options$getChun : _this$options.getChunkSize = defaultOptions.getChunkSize;\n    _classPrivateFieldLooseBase(this, _data)[_data] = data;\n    _classPrivateFieldLooseBase(this, _file)[_file] = options.file;\n    _classPrivateFieldLooseBase(this, _onSuccess)[_onSuccess] = this.options.onSuccess;\n    _classPrivateFieldLooseBase(this, _onError)[_onError] = this.options.onError;\n    _classPrivateFieldLooseBase(this, _shouldUseMultipart)[_shouldUseMultipart] = this.options.shouldUseMultipart;\n\n    // When we are restoring an upload, we already have an UploadId and a Key. Otherwise\n    // we need to call `createMultipartUpload` to get an `uploadId` and a `key`.\n    // Non-multipart uploads are not restorable.\n    _classPrivateFieldLooseBase(this, _isRestoring)[_isRestoring] = options.uploadId && options.key;\n    _classPrivateFieldLooseBase(this, _initChunks)[_initChunks]();\n  }\n  start() {\n    if (_classPrivateFieldLooseBase(this, _uploadHasStarted)[_uploadHasStarted]) {\n      if (!_classPrivateFieldLooseBase(this, _abortController)[_abortController].signal.aborted) _classPrivateFieldLooseBase(this, _abortController)[_abortController].abort(pausingUploadReason);\n      _classPrivateFieldLooseBase(this, _abortController)[_abortController] = new AbortController();\n      _classPrivateFieldLooseBase(this, _resumeUpload)[_resumeUpload]();\n    } else if (_classPrivateFieldLooseBase(this, _isRestoring)[_isRestoring]) {\n      this.options.companionComm.restoreUploadFile(_classPrivateFieldLooseBase(this, _file)[_file], {\n        uploadId: this.options.uploadId,\n        key: this.options.key\n      });\n      _classPrivateFieldLooseBase(this, _resumeUpload)[_resumeUpload]();\n    } else {\n      _classPrivateFieldLooseBase(this, _createUpload)[_createUpload]();\n    }\n  }\n  pause() {\n    _classPrivateFieldLooseBase(this, _abortController)[_abortController].abort(pausingUploadReason);\n    // Swap it out for a new controller, because this instance may be resumed later.\n    _classPrivateFieldLooseBase(this, _abortController)[_abortController] = new AbortController();\n  }\n  abort(opts) {\n    if (opts != null && opts.really) _classPrivateFieldLooseBase(this, _abortUpload)[_abortUpload]();else this.pause();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  [Symbol.for('uppy test: getChunkState')]() {\n    return _classPrivateFieldLooseBase(this, _chunkState)[_chunkState];\n  }\n}\nfunction _initChunks2() {\n  const fileSize = _classPrivateFieldLooseBase(this, _data)[_data].size;\n  const shouldUseMultipart = typeof _classPrivateFieldLooseBase(this, _shouldUseMultipart)[_shouldUseMultipart] === 'function' ? _classPrivateFieldLooseBase(this, _shouldUseMultipart)[_shouldUseMultipart](_classPrivateFieldLooseBase(this, _file)[_file]) : Boolean(_classPrivateFieldLooseBase(this, _shouldUseMultipart)[_shouldUseMultipart]);\n  if (shouldUseMultipart && fileSize > _classPrivateFieldLooseBase(this, _minPartSize)[_minPartSize]) {\n    // At least 5MB per request:\n    let chunkSize = Math.max(this.options.getChunkSize(_classPrivateFieldLooseBase(this, _data)[_data]), // Math.max can take undefined but TS does not think so\n    _classPrivateFieldLooseBase(this, _minPartSize)[_minPartSize]);\n    let arraySize = Math.floor(fileSize / chunkSize);\n\n    // At most 10k requests per file:\n    if (arraySize > _classPrivateFieldLooseBase(this, _maxMultipartParts)[_maxMultipartParts]) {\n      arraySize = _classPrivateFieldLooseBase(this, _maxMultipartParts)[_maxMultipartParts];\n      chunkSize = fileSize / _classPrivateFieldLooseBase(this, _maxMultipartParts)[_maxMultipartParts];\n    }\n    _classPrivateFieldLooseBase(this, _chunks)[_chunks] = Array(arraySize);\n    for (let offset = 0, j = 0; offset < fileSize; offset += chunkSize, j++) {\n      const end = Math.min(fileSize, offset + chunkSize);\n\n      // Defer data fetching/slicing until we actually need the data, because it's slow if we have a lot of files\n      const getData = () => {\n        const i2 = offset;\n        return _classPrivateFieldLooseBase(this, _data)[_data].slice(i2, end);\n      };\n      _classPrivateFieldLooseBase(this, _chunks)[_chunks][j] = {\n        getData,\n        onProgress: _classPrivateFieldLooseBase(this, _onPartProgress)[_onPartProgress](j),\n        onComplete: _classPrivateFieldLooseBase(this, _onPartComplete)[_onPartComplete](j),\n        shouldUseMultipart\n      };\n      if (_classPrivateFieldLooseBase(this, _isRestoring)[_isRestoring]) {\n        const size = offset + chunkSize > fileSize ? fileSize - offset : chunkSize;\n        // setAsUploaded is called by listPart, to keep up-to-date the\n        // quantity of data that is left to actually upload.\n        _classPrivateFieldLooseBase(this, _chunks)[_chunks][j].setAsUploaded = () => {\n          _classPrivateFieldLooseBase(this, _chunks)[_chunks][j] = null;\n          _classPrivateFieldLooseBase(this, _chunkState)[_chunkState][j].uploaded = size;\n        };\n      }\n    }\n  } else {\n    _classPrivateFieldLooseBase(this, _chunks)[_chunks] = [{\n      getData: () => _classPrivateFieldLooseBase(this, _data)[_data],\n      onProgress: _classPrivateFieldLooseBase(this, _onPartProgress)[_onPartProgress](0),\n      onComplete: _classPrivateFieldLooseBase(this, _onPartComplete)[_onPartComplete](0),\n      shouldUseMultipart\n    }];\n  }\n  _classPrivateFieldLooseBase(this, _chunkState)[_chunkState] = _classPrivateFieldLooseBase(this, _chunks)[_chunks].map(() => ({\n    uploaded: 0\n  }));\n}\nfunction _createUpload2() {\n  this.options.companionComm.uploadFile(_classPrivateFieldLooseBase(this, _file)[_file], _classPrivateFieldLooseBase(this, _chunks)[_chunks], _classPrivateFieldLooseBase(this, _abortController)[_abortController].signal).then(_classPrivateFieldLooseBase(this, _onSuccess)[_onSuccess], _classPrivateFieldLooseBase(this, _onReject)[_onReject]);\n  _classPrivateFieldLooseBase(this, _uploadHasStarted)[_uploadHasStarted] = true;\n}\nfunction _resumeUpload2() {\n  this.options.companionComm.resumeUploadFile(_classPrivateFieldLooseBase(this, _file)[_file], _classPrivateFieldLooseBase(this, _chunks)[_chunks], _classPrivateFieldLooseBase(this, _abortController)[_abortController].signal).then(_classPrivateFieldLooseBase(this, _onSuccess)[_onSuccess], _classPrivateFieldLooseBase(this, _onReject)[_onReject]);\n}\nfunction _abortUpload2() {\n  _classPrivateFieldLooseBase(this, _abortController)[_abortController].abort();\n  this.options.companionComm.abortFileUpload(_classPrivateFieldLooseBase(this, _file)[_file]).catch(err => this.options.log(err));\n}\nexport default MultipartUploader;", "import { createAbortError } from '@uppy/utils/lib/AbortController';\nexport function throwIfAborted(signal) {\n  if (signal != null && signal.aborted) {\n    throw createAbortError('The operation was aborted', {\n      cause: signal.reason\n    });\n  }\n}", "/**\n * Create a canonical request by concatenating the following strings, separated\n * by newline characters. This helps ensure that the signature that you\n * calculate and the signature that AWS calculates can match.\n *\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html#create-canonical-request\n *\n * @param param0\n * @param param0.method – The HTTP method.\n * @param param0.CanonicalUri – The URI-encoded version of the absolute\n * path component URL (everything between the host and the question mark\n * character (?) that starts the query string parameters). If the absolute path\n * is empty, use a forward slash character (/).\n * @param param0.CanonicalQueryString – The URL-encoded query string\n * parameters, separated by ampersands (&). Percent-encode reserved characters,\n * including the space character. Encode names and values separately. If there\n * are empty parameters, append the equals sign to the parameter name before\n * encoding. After encoding, sort the parameters alphabetically by key name. If\n * there is no query string, use an empty string (\"\").\n * @param param0.SignedHeaders – The request headers,\n * that will be signed, and their values, separated by newline characters.\n * For the values, trim any leading or trailing spaces, convert sequential\n * spaces to a single space, and separate the values for a multi-value header\n * using commas. You must include the host header (HTTP/1.1), and any x-amz-*\n * headers in the signature. You can optionally include other standard headers\n * in the signature, such as content-type.\n * @param param0.HashedPayload – A string created using the payload in\n * the body of the HTTP request as input to a hash function. This string uses\n * lowercase hexadecimal characters. If the payload is empty, use an empty\n * string as the input to the hash function.\n */\nfunction createCanonicalRequest(_ref) {\n  let {\n    method = 'PUT',\n    CanonicalUri = '/',\n    CanonicalQueryString = '',\n    SignedHeaders,\n    HashedPayload\n  } = _ref;\n  const headerKeys = Object.keys(SignedHeaders).map(k => k.toLowerCase()).sort();\n  return [method, CanonicalUri, CanonicalQueryString, ...headerKeys.map(k => `${k}:${SignedHeaders[k]}`), '', headerKeys.join(';'), HashedPayload].join('\\n');\n}\nconst ec = new TextEncoder();\nconst algorithm = {\n  name: 'HMAC',\n  hash: 'SHA-256'\n};\nasync function digest(data) {\n  const {\n    subtle\n  } = globalThis.crypto;\n  return subtle.digest(algorithm.hash, ec.encode(data));\n}\nasync function generateHmacKey(secret) {\n  const {\n    subtle\n  } = globalThis.crypto;\n  return subtle.importKey('raw', typeof secret === 'string' ? ec.encode(secret) : secret, algorithm, false, ['sign']);\n}\nfunction arrayBufferToHexString(arrayBuffer) {\n  const byteArray = new Uint8Array(arrayBuffer);\n  let hexString = '';\n  for (let i = 0; i < byteArray.length; i++) {\n    hexString += byteArray[i].toString(16).padStart(2, '0');\n  }\n  return hexString;\n}\nasync function hash(key, data) {\n  const {\n    subtle\n  } = globalThis.crypto;\n  return subtle.sign(algorithm, await generateHmacKey(key), ec.encode(data));\n}\n\n/**\n * @see https://docs.aws.amazon.com/IAM/latest/UserGuide/create-signed-request.html\n */\nexport default async function createSignedURL(_ref2) {\n  let {\n    accountKey,\n    accountSecret,\n    sessionToken,\n    bucketName,\n    Key,\n    Region,\n    expires,\n    uploadId,\n    partNumber\n  } = _ref2;\n  const Service = 's3';\n  const host = `${Service}.${Region}.amazonaws.com`;\n  /**\n   * List of char out of `encodeURI()` is taken from ECMAScript spec.\n   * Note that the `/` character is purposefully not included in list below.\n   *\n   * @see https://tc39.es/ecma262/#sec-encodeuri-uri\n   */\n  const CanonicalUri = `/${bucketName}/${encodeURI(Key).replace(/[;?:@&=+$,#!'()*]/g, c => `%${c.charCodeAt(0).toString(16).toUpperCase()}`)}`;\n  const payload = 'UNSIGNED-PAYLOAD';\n  const requestDateTime = new Date().toISOString().replace(/[-:]|\\.\\d+/g, ''); // YYYYMMDDTHHMMSSZ\n  const date = requestDateTime.slice(0, 8); // YYYYMMDD\n  const scope = `${date}/${Region}/${Service}/aws4_request`;\n  const url = new URL(`https://${host}${CanonicalUri}`);\n  // N.B.: URL search params needs to be added in the ASCII order\n  url.searchParams.set('X-Amz-Algorithm', 'AWS4-HMAC-SHA256');\n  url.searchParams.set('X-Amz-Content-Sha256', payload);\n  url.searchParams.set('X-Amz-Credential', `${accountKey}/${scope}`);\n  url.searchParams.set('X-Amz-Date', requestDateTime);\n  url.searchParams.set('X-Amz-Expires', expires);\n  // We are signing on the client, so we expect there's going to be a session token:\n  url.searchParams.set('X-Amz-Security-Token', sessionToken);\n  url.searchParams.set('X-Amz-SignedHeaders', 'host');\n  // Those two are present only for Multipart Uploads:\n  if (partNumber) url.searchParams.set('partNumber', partNumber);\n  if (uploadId) url.searchParams.set('uploadId', uploadId);\n  url.searchParams.set('x-id', partNumber && uploadId ? 'UploadPart' : 'PutObject');\n\n  // Step 1: Create a canonical request\n  const canonical = createCanonicalRequest({\n    CanonicalUri,\n    CanonicalQueryString: url.search.slice(1),\n    SignedHeaders: {\n      host\n    },\n    HashedPayload: payload\n  });\n\n  // Step 2: Create a hash of the canonical request\n  const hashedCanonical = arrayBufferToHexString(await digest(canonical));\n\n  // Step 3: Create a string to sign\n  const stringToSign = [`AWS4-HMAC-SHA256`,\n  // The algorithm used to create the hash of the canonical request.\n  requestDateTime,\n  // The date and time used in the credential scope.\n  scope,\n  // The credential scope. This restricts the resulting signature to the specified Region and service.\n  hashedCanonical // The hash of the canonical request.\n  ].join('\\n');\n\n  // Step 4: Calculate the signature\n  const kDate = await hash(`AWS4${accountSecret}`, date);\n  const kRegion = await hash(kDate, Region);\n  const kService = await hash(kRegion, Service);\n  const kSigning = await hash(kService, 'aws4_request');\n  const signature = arrayBufferToHexString(await hash(kSigning, stringToSign));\n\n  // Step 5: Add the signature to the request\n  url.searchParams.set('X-Amz-Signature', signature);\n  return url;\n}", "function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nimport { pausingUploadReason } from './MultipartUploader.js';\nimport { throwIfAborted } from './utils.js';\nfunction removeMetadataFromURL(urlString) {\n  const urlObject = new URL(urlString);\n  urlObject.search = '';\n  urlObject.hash = '';\n  return urlObject.href;\n}\nvar _abortMultipartUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"abortMultipartUpload\");\nvar _cache = /*#__PURE__*/_classPrivateFieldLooseKey(\"cache\");\nvar _createMultipartUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"createMultipartUpload\");\nvar _fetchSignature = /*#__PURE__*/_classPrivateFieldLooseKey(\"fetchSignature\");\nvar _getUploadParameters = /*#__PURE__*/_classPrivateFieldLooseKey(\"getUploadParameters\");\nvar _listParts = /*#__PURE__*/_classPrivateFieldLooseKey(\"listParts\");\nvar _previousRetryDelay = /*#__PURE__*/_classPrivateFieldLooseKey(\"previousRetryDelay\");\nvar _requests = /*#__PURE__*/_classPrivateFieldLooseKey(\"requests\");\nvar _retryDelays = /*#__PURE__*/_classPrivateFieldLooseKey(\"retryDelays\");\nvar _sendCompletionRequest = /*#__PURE__*/_classPrivateFieldLooseKey(\"sendCompletionRequest\");\nvar _setS3MultipartState = /*#__PURE__*/_classPrivateFieldLooseKey(\"setS3MultipartState\");\nvar _uploadPartBytes = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadPartBytes\");\nvar _getFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"getFile\");\nvar _shouldRetry = /*#__PURE__*/_classPrivateFieldLooseKey(\"shouldRetry\");\nvar _nonMultipartUpload = /*#__PURE__*/_classPrivateFieldLooseKey(\"nonMultipartUpload\");\nexport class HTTPCommunicationQueue {\n  constructor(_requests2, options, setS3MultipartState, getFile) {\n    Object.defineProperty(this, _nonMultipartUpload, {\n      value: _nonMultipartUpload2\n    });\n    Object.defineProperty(this, _shouldRetry, {\n      value: _shouldRetry2\n    });\n    Object.defineProperty(this, _abortMultipartUpload, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _cache, {\n      writable: true,\n      value: new WeakMap()\n    });\n    Object.defineProperty(this, _createMultipartUpload, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _fetchSignature, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _getUploadParameters, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _listParts, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _previousRetryDelay, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _requests, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _retryDelays, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _sendCompletionRequest, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _setS3MultipartState, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _uploadPartBytes, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _getFile, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldLooseBase(this, _requests)[_requests] = _requests2;\n    _classPrivateFieldLooseBase(this, _setS3MultipartState)[_setS3MultipartState] = setS3MultipartState;\n    _classPrivateFieldLooseBase(this, _getFile)[_getFile] = getFile;\n    this.setOptions(options);\n  }\n  setOptions(options) {\n    const requests = _classPrivateFieldLooseBase(this, _requests)[_requests];\n    if ('abortMultipartUpload' in options) {\n      _classPrivateFieldLooseBase(this, _abortMultipartUpload)[_abortMultipartUpload] = requests.wrapPromiseFunction(options.abortMultipartUpload, {\n        priority: 1\n      });\n    }\n    if ('createMultipartUpload' in options) {\n      _classPrivateFieldLooseBase(this, _createMultipartUpload)[_createMultipartUpload] = requests.wrapPromiseFunction(options.createMultipartUpload, {\n        priority: -1\n      });\n    }\n    if ('signPart' in options) {\n      _classPrivateFieldLooseBase(this, _fetchSignature)[_fetchSignature] = requests.wrapPromiseFunction(options.signPart);\n    }\n    if ('listParts' in options) {\n      _classPrivateFieldLooseBase(this, _listParts)[_listParts] = requests.wrapPromiseFunction(options.listParts);\n    }\n    if ('completeMultipartUpload' in options) {\n      _classPrivateFieldLooseBase(this, _sendCompletionRequest)[_sendCompletionRequest] = requests.wrapPromiseFunction(options.completeMultipartUpload, {\n        priority: 1\n      });\n    }\n    if ('retryDelays' in options) {\n      var _options$retryDelays;\n      _classPrivateFieldLooseBase(this, _retryDelays)[_retryDelays] = (_options$retryDelays = options.retryDelays) != null ? _options$retryDelays : [];\n    }\n    if ('uploadPartBytes' in options) {\n      _classPrivateFieldLooseBase(this, _uploadPartBytes)[_uploadPartBytes] = requests.wrapPromiseFunction(options.uploadPartBytes, {\n        priority: Infinity\n      });\n    }\n    if ('getUploadParameters' in options) {\n      _classPrivateFieldLooseBase(this, _getUploadParameters)[_getUploadParameters] = requests.wrapPromiseFunction(options.getUploadParameters);\n    }\n  }\n  async getUploadId(file, signal) {\n    let cachedResult;\n    // As the cache is updated asynchronously, there could be a race condition\n    // where we just miss a new result so we loop here until we get nothing back,\n    // at which point it's out turn to create a new cache entry.\n    // eslint-disable-next-line no-cond-assign\n    while ((cachedResult = _classPrivateFieldLooseBase(this, _cache)[_cache].get(file.data)) != null) {\n      try {\n        return await cachedResult;\n      } catch {\n        // In case of failure, we want to ignore the cached error.\n        // At this point, either there's a new cached value, or we'll exit the loop a create a new one.\n      }\n    }\n    const promise = _classPrivateFieldLooseBase(this, _createMultipartUpload)[_createMultipartUpload](_classPrivateFieldLooseBase(this, _getFile)[_getFile](file), signal);\n    const abortPromise = () => {\n      promise.abort(signal.reason);\n      _classPrivateFieldLooseBase(this, _cache)[_cache].delete(file.data);\n    };\n    signal.addEventListener('abort', abortPromise, {\n      once: true\n    });\n    _classPrivateFieldLooseBase(this, _cache)[_cache].set(file.data, promise);\n    promise.then(async result => {\n      signal.removeEventListener('abort', abortPromise);\n      _classPrivateFieldLooseBase(this, _setS3MultipartState)[_setS3MultipartState](file, result);\n      _classPrivateFieldLooseBase(this, _cache)[_cache].set(file.data, result);\n    }, () => {\n      signal.removeEventListener('abort', abortPromise);\n      _classPrivateFieldLooseBase(this, _cache)[_cache].delete(file.data);\n    });\n    return promise;\n  }\n  async abortFileUpload(file) {\n    const result = _classPrivateFieldLooseBase(this, _cache)[_cache].get(file.data);\n    if (result == null) {\n      // If the createMultipartUpload request never was made, we don't\n      // need to send the abortMultipartUpload request.\n      return;\n    }\n    // Remove the cache entry right away for follow-up requests do not try to\n    // use the soon-to-be aborted cached values.\n    _classPrivateFieldLooseBase(this, _cache)[_cache].delete(file.data);\n    _classPrivateFieldLooseBase(this, _setS3MultipartState)[_setS3MultipartState](file, Object.create(null));\n    let awaitedResult;\n    try {\n      awaitedResult = await result;\n    } catch {\n      // If the cached result rejects, there's nothing to abort.\n      return;\n    }\n    await _classPrivateFieldLooseBase(this, _abortMultipartUpload)[_abortMultipartUpload](_classPrivateFieldLooseBase(this, _getFile)[_getFile](file), awaitedResult);\n  }\n  async uploadFile(file, chunks, signal) {\n    throwIfAborted(signal);\n    if (chunks.length === 1 && !chunks[0].shouldUseMultipart) {\n      return _classPrivateFieldLooseBase(this, _nonMultipartUpload)[_nonMultipartUpload](file, chunks[0], signal);\n    }\n    const {\n      uploadId,\n      key\n    } = await this.getUploadId(file, signal);\n    throwIfAborted(signal);\n    try {\n      const parts = await Promise.all(chunks.map((chunk, i) => this.uploadChunk(file, i + 1, chunk, signal)));\n      throwIfAborted(signal);\n      return await _classPrivateFieldLooseBase(this, _sendCompletionRequest)[_sendCompletionRequest](_classPrivateFieldLooseBase(this, _getFile)[_getFile](file), {\n        key,\n        uploadId,\n        parts,\n        signal\n      }, signal).abortOn(signal);\n    } catch (err) {\n      if ((err == null ? void 0 : err.cause) !== pausingUploadReason && (err == null ? void 0 : err.name) !== 'AbortError') {\n        // We purposefully don't wait for the promise and ignore its status,\n        // because we want the error `err` to bubble up ASAP to report it to the\n        // user. A failure to abort is not that big of a deal anyway.\n        this.abortFileUpload(file);\n      }\n      throw err;\n    }\n  }\n  restoreUploadFile(file, uploadIdAndKey) {\n    _classPrivateFieldLooseBase(this, _cache)[_cache].set(file.data, uploadIdAndKey);\n  }\n  async resumeUploadFile(file, chunks, signal) {\n    throwIfAborted(signal);\n    if (chunks.length === 1 && chunks[0] != null && !chunks[0].shouldUseMultipart) {\n      return _classPrivateFieldLooseBase(this, _nonMultipartUpload)[_nonMultipartUpload](file, chunks[0], signal);\n    }\n    const {\n      uploadId,\n      key\n    } = await this.getUploadId(file, signal);\n    throwIfAborted(signal);\n    const alreadyUploadedParts = await _classPrivateFieldLooseBase(this, _listParts)[_listParts](_classPrivateFieldLooseBase(this, _getFile)[_getFile](file), {\n      uploadId,\n      key,\n      signal\n    }, signal).abortOn(signal);\n    throwIfAborted(signal);\n    const parts = await Promise.all(chunks.map((chunk, i) => {\n      const partNumber = i + 1;\n      const alreadyUploadedInfo = alreadyUploadedParts.find(_ref => {\n        let {\n          PartNumber\n        } = _ref;\n        return PartNumber === partNumber;\n      });\n      if (alreadyUploadedInfo == null) {\n        return this.uploadChunk(file, partNumber, chunk, signal);\n      }\n      // Already uploaded chunks are set to null. If we are restoring the upload, we need to mark it as already uploaded.\n      chunk == null || chunk.setAsUploaded == null || chunk.setAsUploaded();\n      return {\n        PartNumber: partNumber,\n        ETag: alreadyUploadedInfo.ETag\n      };\n    }));\n    throwIfAborted(signal);\n    return _classPrivateFieldLooseBase(this, _sendCompletionRequest)[_sendCompletionRequest](_classPrivateFieldLooseBase(this, _getFile)[_getFile](file), {\n      key,\n      uploadId,\n      parts,\n      signal\n    }, signal).abortOn(signal);\n  }\n  async uploadChunk(file, partNumber, chunk, signal) {\n    throwIfAborted(signal);\n    const {\n      uploadId,\n      key\n    } = await this.getUploadId(file, signal);\n    const signatureRetryIterator = _classPrivateFieldLooseBase(this, _retryDelays)[_retryDelays].values();\n    const chunkRetryIterator = _classPrivateFieldLooseBase(this, _retryDelays)[_retryDelays].values();\n    const shouldRetrySignature = () => {\n      const next = signatureRetryIterator.next();\n      if (next == null || next.done) {\n        return null;\n      }\n      return next.value;\n    };\n    for (;;) {\n      throwIfAborted(signal);\n      const chunkData = chunk.getData();\n      const {\n        onProgress,\n        onComplete\n      } = chunk;\n      let signature;\n      try {\n        signature = await _classPrivateFieldLooseBase(this, _fetchSignature)[_fetchSignature](_classPrivateFieldLooseBase(this, _getFile)[_getFile](file), {\n          // Always defined for multipart uploads\n          uploadId: uploadId,\n          key,\n          partNumber,\n          body: chunkData,\n          signal\n        }).abortOn(signal);\n      } catch (err) {\n        const timeout = shouldRetrySignature();\n        if (timeout == null || signal.aborted) {\n          throw err;\n        }\n        await new Promise(resolve => setTimeout(resolve, timeout));\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      throwIfAborted(signal);\n      try {\n        return {\n          PartNumber: partNumber,\n          ...(await _classPrivateFieldLooseBase(this, _uploadPartBytes)[_uploadPartBytes]({\n            signature,\n            body: chunkData,\n            size: chunkData.size,\n            onProgress,\n            onComplete,\n            signal\n          }).abortOn(signal))\n        };\n      } catch (err) {\n        if (!(await _classPrivateFieldLooseBase(this, _shouldRetry)[_shouldRetry](err, chunkRetryIterator))) throw err;\n      }\n    }\n  }\n}\nasync function _shouldRetry2(err, retryDelayIterator) {\n  var _err$source;\n  const requests = _classPrivateFieldLooseBase(this, _requests)[_requests];\n  const status = err == null || (_err$source = err.source) == null ? void 0 : _err$source.status;\n\n  // TODO: this retry logic is taken out of Tus. We should have a centralized place for retrying,\n  // perhaps the rate limited queue, and dedupe all plugins with that.\n  if (status == null) {\n    return false;\n  }\n  if (status === 403 && err.message === 'Request has expired') {\n    if (!requests.isPaused) {\n      // We don't want to exhaust the retryDelayIterator as long as there are\n      // more than one request in parallel, to give slower connection a chance\n      // to catch up with the expiry set in Companion.\n      if (requests.limit === 1 || _classPrivateFieldLooseBase(this, _previousRetryDelay)[_previousRetryDelay] == null) {\n        const next = retryDelayIterator.next();\n        if (next == null || next.done) {\n          return false;\n        }\n        // If there are more than 1 request done in parallel, the RLQ limit is\n        // decreased and the failed request is requeued after waiting for a bit.\n        // If there is only one request in parallel, the limit can't be\n        // decreased, so we iterate over `retryDelayIterator` as we do for\n        // other failures.\n        // `#previousRetryDelay` caches the value so we can re-use it next time.\n        _classPrivateFieldLooseBase(this, _previousRetryDelay)[_previousRetryDelay] = next.value;\n      }\n      // No need to stop the other requests, we just want to lower the limit.\n      requests.rateLimit(0);\n      await new Promise(resolve => setTimeout(resolve, _classPrivateFieldLooseBase(this, _previousRetryDelay)[_previousRetryDelay]));\n    }\n  } else if (status === 429) {\n    // HTTP 429 Too Many Requests => to avoid the whole download to fail, pause all requests.\n    if (!requests.isPaused) {\n      const next = retryDelayIterator.next();\n      if (next == null || next.done) {\n        return false;\n      }\n      requests.rateLimit(next.value);\n    }\n  } else if (status > 400 && status < 500 && status !== 409) {\n    // HTTP 4xx, the server won't send anything, it's doesn't make sense to retry\n    return false;\n  } else if (typeof navigator !== 'undefined' && navigator.onLine === false) {\n    // The navigator is offline, let's wait for it to come back online.\n    if (!requests.isPaused) {\n      requests.pause();\n      window.addEventListener('online', () => {\n        requests.resume();\n      }, {\n        once: true\n      });\n    }\n  } else {\n    // Other error code means the request can be retried later.\n    const next = retryDelayIterator.next();\n    if (next == null || next.done) {\n      return false;\n    }\n    await new Promise(resolve => setTimeout(resolve, next.value));\n  }\n  return true;\n}\nasync function _nonMultipartUpload2(file, chunk, signal) {\n  var _ref3;\n  const {\n    method = 'POST',\n    url,\n    fields,\n    headers\n  } = await _classPrivateFieldLooseBase(this, _getUploadParameters)[_getUploadParameters](_classPrivateFieldLooseBase(this, _getFile)[_getFile](file), {\n    signal\n  }).abortOn(signal);\n  let body;\n  const data = chunk.getData();\n  if (method.toUpperCase() === 'POST') {\n    const formData = new FormData();\n    Object.entries(fields).forEach(_ref2 => {\n      let [key, value] = _ref2;\n      return formData.set(key, value);\n    });\n    formData.set('file', data);\n    body = formData;\n  } else {\n    body = data;\n  }\n  const {\n    onProgress,\n    onComplete\n  } = chunk;\n  const result = await _classPrivateFieldLooseBase(this, _uploadPartBytes)[_uploadPartBytes]({\n    signature: {\n      url,\n      headers,\n      method\n    },\n    body,\n    size: data.size,\n    onProgress,\n    onComplete,\n    signal\n  }).abortOn(signal); // todo this doesn't make sense\n\n  // Note: `fields.key` is not returned by old Companion versions.\n  // See https://github.com/transloadit/uppy/pull/5602\n  const key = fields == null ? void 0 : fields.key;\n  _classPrivateFieldLooseBase(this, _setS3MultipartState)[_setS3MultipartState](file, {\n    key: key\n  });\n  return {\n    ...result,\n    location: (_ref3 = result.location) != null ? _ref3 : removeMetadataFromURL(url),\n    bucket: fields == null ? void 0 : fields.bucket,\n    key\n  };\n}", "function _classPrivateFieldLooseBase(e, t) { if (!{}.hasOwnProperty.call(e, t)) throw new TypeError(\"attempted to use private field on non-instance\"); return e; }\nvar id = 0;\nfunction _classPrivateFieldLooseKey(e) { return \"__private_\" + id++ + \"_\" + e; }\nimport { BasePlugin } from '@uppy/core';\nimport { RequestClient } from '@uppy/companion-client';\nimport EventManager from '@uppy/core/lib/EventManager.js';\nimport { RateLimitedQueue } from '@uppy/utils/lib/RateLimitedQueue';\nimport { filterNonFailedFiles, filterFilesToEmitUploadStarted } from '@uppy/utils/lib/fileFilters';\nimport { createAbortError } from '@uppy/utils/lib/AbortController';\nimport getAllowedMetaFields from '@uppy/utils/lib/getAllowedMetaFields';\nimport MultipartUploader from './MultipartUploader.js';\nimport { throwIfAborted } from './utils.js';\nimport createSignedURL from './createSignedURL.js';\nimport { HTTPCommunicationQueue } from './HTTPCommunicationQueue.js';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"4.2.3\"\n};\nfunction assertServerError(res) {\n  if (res != null && res.error) {\n    const error = new Error(res.message);\n    Object.assign(error, res.error);\n    throw error;\n  }\n  return res;\n}\n/**\n * Computes the expiry time for a request signed with temporary credentials. If\n * no expiration was provided, or an invalid value (e.g. in the past) is\n * provided, undefined is returned. This function assumes the client clock is in\n * sync with the remote server, which is a requirement for the signature to be\n * validated for AWS anyway.\n */\nfunction getExpiry(credentials) {\n  const expirationDate = credentials.Expiration;\n  if (expirationDate) {\n    const timeUntilExpiry = Math.floor((new Date(expirationDate) - Date.now()) / 1000);\n    if (timeUntilExpiry > 9) {\n      return timeUntilExpiry;\n    }\n  }\n  return undefined;\n}\nfunction getAllowedMetadata(_ref) {\n  let {\n    meta,\n    allowedMetaFields,\n    querify = false\n  } = _ref;\n  const metaFields = allowedMetaFields != null ? allowedMetaFields : Object.keys(meta);\n  if (!meta) return {};\n  return Object.fromEntries(metaFields.filter(key => meta[key] != null).map(key => {\n    const realKey = querify ? `metadata[${key}]` : key;\n    const value = String(meta[key]);\n    return [realKey, value];\n  }));\n}\nconst defaultOptions = {\n  allowedMetaFields: true,\n  limit: 6,\n  getTemporarySecurityCredentials: false,\n  shouldUseMultipart: file => (file.size || 0) > 100 * 1024 * 1024,\n  retryDelays: [0, 1000, 3000, 5000]\n};\nvar _companionCommunicationQueue = /*#__PURE__*/_classPrivateFieldLooseKey(\"companionCommunicationQueue\");\nvar _client = /*#__PURE__*/_classPrivateFieldLooseKey(\"client\");\nvar _setClient = /*#__PURE__*/_classPrivateFieldLooseKey(\"setClient\");\nvar _assertHost = /*#__PURE__*/_classPrivateFieldLooseKey(\"assertHost\");\nvar _cachedTemporaryCredentials = /*#__PURE__*/_classPrivateFieldLooseKey(\"cachedTemporaryCredentials\");\nvar _getTemporarySecurityCredentials = /*#__PURE__*/_classPrivateFieldLooseKey(\"getTemporarySecurityCredentials\");\nvar _setS3MultipartState = /*#__PURE__*/_classPrivateFieldLooseKey(\"setS3MultipartState\");\nvar _getFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"getFile\");\nvar _uploadLocalFile = /*#__PURE__*/_classPrivateFieldLooseKey(\"uploadLocalFile\");\nvar _getCompanionClientArgs = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCompanionClientArgs\");\nvar _upload = /*#__PURE__*/_classPrivateFieldLooseKey(\"upload\");\nvar _setCompanionHeaders = /*#__PURE__*/_classPrivateFieldLooseKey(\"setCompanionHeaders\");\nvar _setResumableUploadsCapability = /*#__PURE__*/_classPrivateFieldLooseKey(\"setResumableUploadsCapability\");\nvar _resetResumableCapability = /*#__PURE__*/_classPrivateFieldLooseKey(\"resetResumableCapability\");\nexport default class AwsS3Multipart extends BasePlugin {\n  constructor(uppy, _opts) {\n    var _rateLimitedQueue;\n    super(uppy, {\n      ...defaultOptions,\n      uploadPartBytes: AwsS3Multipart.uploadPartBytes,\n      createMultipartUpload: null,\n      listParts: null,\n      abortMultipartUpload: null,\n      completeMultipartUpload: null,\n      signPart: null,\n      getUploadParameters: null,\n      ..._opts\n    });\n    // We need the `as any` here because of the dynamic default options.\n    // eslint-disable-next-line class-methods-use-this\n    Object.defineProperty(this, _getCompanionClientArgs, {\n      value: _getCompanionClientArgs2\n    });\n    Object.defineProperty(this, _uploadLocalFile, {\n      value: _uploadLocalFile2\n    });\n    Object.defineProperty(this, _getTemporarySecurityCredentials, {\n      value: _getTemporarySecurityCredentials2\n    });\n    Object.defineProperty(this, _assertHost, {\n      value: _assertHost2\n    });\n    Object.defineProperty(this, _setClient, {\n      value: _setClient2\n    });\n    Object.defineProperty(this, _companionCommunicationQueue, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _client, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _cachedTemporaryCredentials, {\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, _setS3MultipartState, {\n      writable: true,\n      value: (file, _ref2) => {\n        let {\n          key,\n          uploadId\n        } = _ref2;\n        const cFile = this.uppy.getFile(file.id);\n        if (cFile == null) {\n          // file was removed from store\n          return;\n        }\n        this.uppy.setFileState(file.id, {\n          s3Multipart: {\n            ...cFile.s3Multipart,\n            key,\n            uploadId\n          }\n        });\n      }\n    });\n    Object.defineProperty(this, _getFile, {\n      writable: true,\n      value: file => {\n        return this.uppy.getFile(file.id) || file;\n      }\n    });\n    Object.defineProperty(this, _upload, {\n      writable: true,\n      value: async fileIDs => {\n        if (fileIDs.length === 0) return undefined;\n        const files = this.uppy.getFilesByIds(fileIDs);\n        const filesFiltered = filterNonFailedFiles(files);\n        const filesToEmit = filterFilesToEmitUploadStarted(filesFiltered);\n        this.uppy.emit('upload-start', filesToEmit);\n        const promises = filesFiltered.map(file => {\n          if (file.isRemote) {\n            const getQueue = () => this.requests;\n            _classPrivateFieldLooseBase(this, _setResumableUploadsCapability)[_setResumableUploadsCapability](false);\n            const controller = new AbortController();\n            const removedHandler = removedFile => {\n              if (removedFile.id === file.id) controller.abort();\n            };\n            this.uppy.on('file-removed', removedHandler);\n            const uploadPromise = this.uppy.getRequestClientForFile(file).uploadRemoteFile(file, _classPrivateFieldLooseBase(this, _getCompanionClientArgs)[_getCompanionClientArgs](file), {\n              signal: controller.signal,\n              getQueue\n            });\n            this.requests.wrapSyncFunction(() => {\n              this.uppy.off('file-removed', removedHandler);\n            }, {\n              priority: -1\n            })();\n            return uploadPromise;\n          }\n          return _classPrivateFieldLooseBase(this, _uploadLocalFile)[_uploadLocalFile](file);\n        });\n        const upload = await Promise.allSettled(promises);\n        // After the upload is done, another upload may happen with only local files.\n        // We reset the capability so that the next upload can use resumable uploads.\n        _classPrivateFieldLooseBase(this, _setResumableUploadsCapability)[_setResumableUploadsCapability](true);\n        return upload;\n      }\n    });\n    Object.defineProperty(this, _setCompanionHeaders, {\n      writable: true,\n      value: () => {\n        var _classPrivateFieldLoo;\n        (_classPrivateFieldLoo = _classPrivateFieldLooseBase(this, _client)[_client]) == null || _classPrivateFieldLoo.setCompanionHeaders(this.opts.headers);\n      }\n    });\n    Object.defineProperty(this, _setResumableUploadsCapability, {\n      writable: true,\n      value: boolean => {\n        const {\n          capabilities\n        } = this.uppy.getState();\n        this.uppy.setState({\n          capabilities: {\n            ...capabilities,\n            resumableUploads: boolean\n          }\n        });\n      }\n    });\n    Object.defineProperty(this, _resetResumableCapability, {\n      writable: true,\n      value: () => {\n        _classPrivateFieldLooseBase(this, _setResumableUploadsCapability)[_setResumableUploadsCapability](true);\n      }\n    });\n    this.type = 'uploader';\n    this.id = this.opts.id || 'AwsS3Multipart';\n    _classPrivateFieldLooseBase(this, _setClient)[_setClient](_opts);\n    const dynamicDefaultOptions = {\n      createMultipartUpload: this.createMultipartUpload,\n      listParts: this.listParts,\n      abortMultipartUpload: this.abortMultipartUpload,\n      completeMultipartUpload: this.completeMultipartUpload,\n      signPart: _opts != null && _opts.getTemporarySecurityCredentials ? this.createSignedURL : this.signPart,\n      getUploadParameters: _opts != null && _opts.getTemporarySecurityCredentials ? this.createSignedURL : this.getUploadParameters\n    };\n    for (const key of Object.keys(dynamicDefaultOptions)) {\n      if (this.opts[key] == null) {\n        this.opts[key] = dynamicDefaultOptions[key].bind(this);\n      }\n    }\n\n    /**\n     * Simultaneous upload limiting is shared across all uploads with this plugin.\n     *\n     * @type {RateLimitedQueue}\n     */\n    this.requests = (_rateLimitedQueue = this.opts.rateLimitedQueue) != null ? _rateLimitedQueue : new RateLimitedQueue(this.opts.limit);\n    _classPrivateFieldLooseBase(this, _companionCommunicationQueue)[_companionCommunicationQueue] = new HTTPCommunicationQueue(this.requests, this.opts, _classPrivateFieldLooseBase(this, _setS3MultipartState)[_setS3MultipartState], _classPrivateFieldLooseBase(this, _getFile)[_getFile]);\n    this.uploaders = Object.create(null);\n    this.uploaderEvents = Object.create(null);\n  }\n  [Symbol.for('uppy test: getClient')]() {\n    return _classPrivateFieldLooseBase(this, _client)[_client];\n  }\n  setOptions(newOptions) {\n    _classPrivateFieldLooseBase(this, _companionCommunicationQueue)[_companionCommunicationQueue].setOptions(newOptions);\n    super.setOptions(newOptions);\n    _classPrivateFieldLooseBase(this, _setClient)[_setClient](newOptions);\n  }\n\n  /**\n   * Clean up all references for a file's upload: the MultipartUploader instance,\n   * any events related to the file, and the Companion WebSocket connection.\n   *\n   * Set `opts.abort` to tell S3 that the multipart upload is cancelled and must be removed.\n   * This should be done when the user cancels the upload, not when the upload is completed or errored.\n   */\n  resetUploaderReferences(fileID, opts) {\n    if (this.uploaders[fileID]) {\n      this.uploaders[fileID].abort({\n        really: (opts == null ? void 0 : opts.abort) || false\n      });\n      this.uploaders[fileID] = null;\n    }\n    if (this.uploaderEvents[fileID]) {\n      this.uploaderEvents[fileID].remove();\n      this.uploaderEvents[fileID] = null;\n    }\n  }\n  createMultipartUpload(file, signal) {\n    _classPrivateFieldLooseBase(this, _assertHost)[_assertHost]('createMultipartUpload');\n    throwIfAborted(signal);\n    const allowedMetaFields = getAllowedMetaFields(this.opts.allowedMetaFields, file.meta);\n    const metadata = getAllowedMetadata({\n      meta: file.meta,\n      allowedMetaFields\n    });\n    return _classPrivateFieldLooseBase(this, _client)[_client].post('s3/multipart', {\n      filename: file.name,\n      type: file.type,\n      metadata\n    }, {\n      signal\n    }).then(assertServerError);\n  }\n  listParts(file, _ref3, oldSignal) {\n    var _signal;\n    let {\n      key,\n      uploadId,\n      signal\n    } = _ref3;\n    (_signal = signal) != null ? _signal : signal = oldSignal; // eslint-disable-line no-param-reassign\n    _classPrivateFieldLooseBase(this, _assertHost)[_assertHost]('listParts');\n    throwIfAborted(signal);\n    const filename = encodeURIComponent(key);\n    return _classPrivateFieldLooseBase(this, _client)[_client].get(`s3/multipart/${encodeURIComponent(uploadId)}?key=${filename}`, {\n      signal\n    }).then(assertServerError);\n  }\n  completeMultipartUpload(file, _ref4, oldSignal) {\n    var _signal2;\n    let {\n      key,\n      uploadId,\n      parts,\n      signal\n    } = _ref4;\n    (_signal2 = signal) != null ? _signal2 : signal = oldSignal; // eslint-disable-line no-param-reassign\n    _classPrivateFieldLooseBase(this, _assertHost)[_assertHost]('completeMultipartUpload');\n    throwIfAborted(signal);\n    const filename = encodeURIComponent(key);\n    const uploadIdEnc = encodeURIComponent(uploadId);\n    return _classPrivateFieldLooseBase(this, _client)[_client].post(`s3/multipart/${uploadIdEnc}/complete?key=${filename}`, {\n      parts: parts.map(_ref5 => {\n        let {\n          ETag,\n          PartNumber\n        } = _ref5;\n        return {\n          ETag,\n          PartNumber\n        };\n      })\n    }, {\n      signal\n    }).then(assertServerError);\n  }\n  async createSignedURL(file, options) {\n    const data = await _classPrivateFieldLooseBase(this, _getTemporarySecurityCredentials)[_getTemporarySecurityCredentials](options);\n    const expires = getExpiry(data.credentials) || 604800; // 604 800 is the max value accepted by AWS.\n\n    const {\n      uploadId,\n      key,\n      partNumber\n    } = options;\n\n    // Return an object in the correct shape.\n    return {\n      method: 'PUT',\n      expires,\n      fields: {},\n      url: `${await createSignedURL({\n        accountKey: data.credentials.AccessKeyId,\n        accountSecret: data.credentials.SecretAccessKey,\n        sessionToken: data.credentials.SessionToken,\n        expires,\n        bucketName: data.bucket,\n        Region: data.region,\n        Key: key != null ? key : `${crypto.randomUUID()}-${file.name}`,\n        uploadId,\n        partNumber\n      })}`,\n      // Provide content type header required by S3\n      headers: {\n        'Content-Type': file.type\n      }\n    };\n  }\n  signPart(file, _ref6) {\n    let {\n      uploadId,\n      key,\n      partNumber,\n      signal\n    } = _ref6;\n    _classPrivateFieldLooseBase(this, _assertHost)[_assertHost]('signPart');\n    throwIfAborted(signal);\n    if (uploadId == null || key == null || partNumber == null) {\n      throw new Error('Cannot sign without a key, an uploadId, and a partNumber');\n    }\n    const filename = encodeURIComponent(key);\n    return _classPrivateFieldLooseBase(this, _client)[_client].get(`s3/multipart/${encodeURIComponent(uploadId)}/${partNumber}?key=${filename}`, {\n      signal\n    }).then(assertServerError);\n  }\n  abortMultipartUpload(file, _ref7) {\n    let {\n      key,\n      uploadId,\n      signal\n    } = _ref7;\n    _classPrivateFieldLooseBase(this, _assertHost)[_assertHost]('abortMultipartUpload');\n    const filename = encodeURIComponent(key);\n    const uploadIdEnc = encodeURIComponent(uploadId);\n    return _classPrivateFieldLooseBase(this, _client)[_client].delete(`s3/multipart/${uploadIdEnc}?key=${filename}`, undefined, {\n      signal\n    }).then(assertServerError);\n  }\n  getUploadParameters(file, options) {\n    _classPrivateFieldLooseBase(this, _assertHost)[_assertHost]('getUploadParameters');\n    const {\n      meta\n    } = file;\n    const {\n      type,\n      name: filename\n    } = meta;\n    const allowedMetaFields = getAllowedMetaFields(this.opts.allowedMetaFields, file.meta);\n    const metadata = getAllowedMetadata({\n      meta,\n      allowedMetaFields,\n      querify: true\n    });\n    const query = new URLSearchParams({\n      filename,\n      type,\n      ...metadata\n    });\n    return _classPrivateFieldLooseBase(this, _client)[_client].get(`s3/params?${query}`, options);\n  }\n  static async uploadPartBytes(_ref8) {\n    let {\n      signature: {\n        url,\n        expires,\n        headers,\n        method = 'PUT'\n      },\n      body,\n      size = body.size,\n      onProgress,\n      onComplete,\n      signal\n    } = _ref8;\n    throwIfAborted(signal);\n    if (url == null) {\n      throw new Error('Cannot upload to an undefined URL');\n    }\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n      xhr.open(method, url, true);\n      if (headers) {\n        Object.keys(headers).forEach(key => {\n          xhr.setRequestHeader(key, headers[key]);\n        });\n      }\n      xhr.responseType = 'text';\n      if (typeof expires === 'number') {\n        xhr.timeout = expires * 1000;\n      }\n      function onabort() {\n        xhr.abort();\n      }\n      function cleanup() {\n        signal == null || signal.removeEventListener('abort', onabort);\n      }\n      signal == null || signal.addEventListener('abort', onabort);\n      xhr.upload.addEventListener('progress', ev => {\n        onProgress(ev);\n      });\n      xhr.addEventListener('abort', () => {\n        cleanup();\n        reject(createAbortError());\n      });\n      xhr.addEventListener('timeout', () => {\n        cleanup();\n        const error = new Error('Request has expired');\n        error.source = {\n          status: 403\n        };\n        reject(error);\n      });\n      xhr.addEventListener('load', () => {\n        cleanup();\n        if (xhr.status === 403 && xhr.responseText.includes('<Message>Request has expired</Message>')) {\n          const error = new Error('Request has expired');\n          error.source = xhr;\n          reject(error);\n          return;\n        }\n        if (xhr.status < 200 || xhr.status >= 300) {\n          const error = new Error('Non 2xx');\n          error.source = xhr;\n          reject(error);\n          return;\n        }\n        onProgress == null || onProgress({\n          loaded: size,\n          lengthComputable: true\n        });\n\n        // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/getAllResponseHeaders#examples\n        const arr = xhr.getAllResponseHeaders().trim().split(/[\\r\\n]+/);\n        // @ts-expect-error null is allowed to avoid inherited properties\n        const headersMap = {\n          __proto__: null\n        };\n        for (const line of arr) {\n          const parts = line.split(': ');\n          const header = parts.shift();\n          const value = parts.join(': ');\n          headersMap[header] = value;\n        }\n        const {\n          etag,\n          location\n        } = headersMap;\n\n        // More info bucket settings when this is not present:\n        // https://github.com/transloadit/uppy/issues/5388#issuecomment-2464885562\n        if (method.toUpperCase() === 'POST' && location == null) {\n          // Not being able to read the Location header is not a fatal error.\n          // eslint-disable-next-line no-console\n          console.error('@uppy/aws-s3: Could not read the Location header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3/#setting-up-your-s3-bucket');\n        }\n        if (etag == null) {\n          // eslint-disable-next-line no-console\n          console.error('@uppy/aws-s3: Could not read the ETag header. This likely means CORS is not configured correctly on the S3 Bucket. See https://uppy.io/docs/aws-s3/#setting-up-your-s3-bucket');\n          return;\n        }\n        onComplete == null || onComplete(etag);\n        resolve({\n          ...headersMap,\n          ETag: etag // keep capitalised ETag for backwards compatiblity\n        });\n      });\n      xhr.addEventListener('error', ev => {\n        cleanup();\n        const error = new Error('Unknown error');\n        error.source = ev.target;\n        reject(error);\n      });\n      xhr.send(body);\n    });\n  }\n  install() {\n    _classPrivateFieldLooseBase(this, _setResumableUploadsCapability)[_setResumableUploadsCapability](true);\n    this.uppy.addPreProcessor(_classPrivateFieldLooseBase(this, _setCompanionHeaders)[_setCompanionHeaders]);\n    this.uppy.addUploader(_classPrivateFieldLooseBase(this, _upload)[_upload]);\n    this.uppy.on('cancel-all', _classPrivateFieldLooseBase(this, _resetResumableCapability)[_resetResumableCapability]);\n  }\n  uninstall() {\n    this.uppy.removePreProcessor(_classPrivateFieldLooseBase(this, _setCompanionHeaders)[_setCompanionHeaders]);\n    this.uppy.removeUploader(_classPrivateFieldLooseBase(this, _upload)[_upload]);\n    this.uppy.off('cancel-all', _classPrivateFieldLooseBase(this, _resetResumableCapability)[_resetResumableCapability]);\n  }\n}\nfunction _setClient2(opts) {\n  if (opts == null || !('endpoint' in opts || 'companionUrl' in opts || 'headers' in opts || 'companionHeaders' in opts || 'cookiesRule' in opts || 'companionCookiesRule' in opts)) return;\n  if ('companionUrl' in opts && !('endpoint' in opts)) {\n    this.uppy.log('`companionUrl` option has been removed in @uppy/aws-s3, use `endpoint` instead.', 'warning');\n  }\n  if ('companionHeaders' in opts && !('headers' in opts)) {\n    this.uppy.log('`companionHeaders` option has been removed in @uppy/aws-s3, use `headers` instead.', 'warning');\n  }\n  if ('companionCookiesRule' in opts && !('cookiesRule' in opts)) {\n    this.uppy.log('`companionCookiesRule` option has been removed in @uppy/aws-s3, use `cookiesRule` instead.', 'warning');\n  }\n  if ('endpoint' in opts) {\n    _classPrivateFieldLooseBase(this, _client)[_client] = new RequestClient(this.uppy, {\n      pluginId: this.id,\n      provider: 'AWS',\n      companionUrl: this.opts.endpoint,\n      companionHeaders: this.opts.headers,\n      companionCookiesRule: this.opts.cookiesRule\n    });\n  } else {\n    if ('headers' in opts) {\n      _classPrivateFieldLooseBase(this, _setCompanionHeaders)[_setCompanionHeaders]();\n    }\n    if ('cookiesRule' in opts) {\n      _classPrivateFieldLooseBase(this, _client)[_client].opts.companionCookiesRule = opts.cookiesRule;\n    }\n  }\n}\nfunction _assertHost2(method) {\n  if (!_classPrivateFieldLooseBase(this, _client)[_client]) {\n    throw new Error(`Expected a \\`endpoint\\` option containing a URL, or if you are not using Companion, a custom \\`${method}\\` implementation.`);\n  }\n}\nasync function _getTemporarySecurityCredentials2(options) {\n  throwIfAborted(options == null ? void 0 : options.signal);\n  if (_classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials] == null) {\n    const {\n      getTemporarySecurityCredentials\n    } = this.opts;\n    // We do not await it just yet, so concurrent calls do not try to override it:\n    if (getTemporarySecurityCredentials === true) {\n      _classPrivateFieldLooseBase(this, _assertHost)[_assertHost]('getTemporarySecurityCredentials');\n      _classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials] = _classPrivateFieldLooseBase(this, _client)[_client].get('s3/sts', options).then(assertServerError);\n    } else {\n      _classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials] = getTemporarySecurityCredentials(options);\n    }\n    _classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials] = await _classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials];\n    setTimeout(() => {\n      // At half the time left before expiration, we clear the cache. That's\n      // an arbitrary tradeoff to limit the number of requests made to the\n      // remote while limiting the risk of using an expired token in case the\n      // clocks are not exactly synced.\n      // The HTTP cache should be configured to ensure a client doesn't request\n      // more tokens than it needs, but this timeout provides a second layer of\n      // security in case the HTTP cache is disabled or misconfigured.\n      _classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials] = null;\n    }, (getExpiry(_classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials].credentials) || 0) * 500);\n  }\n  return _classPrivateFieldLooseBase(this, _cachedTemporaryCredentials)[_cachedTemporaryCredentials];\n}\nfunction _uploadLocalFile2(file) {\n  var _this = this;\n  return new Promise((resolve, reject) => {\n    const onProgress = (bytesUploaded, bytesTotal) => {\n      var _latestFile$progress$;\n      const latestFile = this.uppy.getFile(file.id);\n      this.uppy.emit('upload-progress', latestFile, {\n        uploadStarted: (_latestFile$progress$ = latestFile.progress.uploadStarted) != null ? _latestFile$progress$ : 0,\n        bytesUploaded,\n        bytesTotal\n      });\n    };\n    const onError = err => {\n      this.uppy.log(err);\n      this.uppy.emit('upload-error', file, err);\n      this.resetUploaderReferences(file.id);\n      reject(err);\n    };\n    const onSuccess = result => {\n      const uploadResp = {\n        body: {\n          ...result\n        },\n        status: 200,\n        uploadURL: result.location\n      };\n      this.resetUploaderReferences(file.id);\n      this.uppy.emit('upload-success', _classPrivateFieldLooseBase(this, _getFile)[_getFile](file), uploadResp);\n      if (result.location) {\n        this.uppy.log(`Download ${file.name} from ${result.location}`);\n      }\n      resolve();\n    };\n    const upload = new MultipartUploader(file.data, {\n      // .bind to pass the file object to each handler.\n      companionComm: _classPrivateFieldLooseBase(this, _companionCommunicationQueue)[_companionCommunicationQueue],\n      log: function () {\n        return _this.uppy.log(...arguments);\n      },\n      getChunkSize: this.opts.getChunkSize ? this.opts.getChunkSize.bind(this) : undefined,\n      onProgress,\n      onError,\n      onSuccess,\n      onPartComplete: part => {\n        this.uppy.emit('s3-multipart:part-uploaded', _classPrivateFieldLooseBase(this, _getFile)[_getFile](file), part);\n      },\n      file,\n      shouldUseMultipart: this.opts.shouldUseMultipart,\n      ...file.s3Multipart\n    });\n    this.uploaders[file.id] = upload;\n    const eventManager = new EventManager(this.uppy);\n    this.uploaderEvents[file.id] = eventManager;\n    eventManager.onFileRemove(file.id, removed => {\n      upload.abort();\n      this.resetUploaderReferences(file.id, {\n        abort: true\n      });\n      resolve(`upload ${removed} was removed`);\n    });\n    eventManager.onCancelAll(file.id, () => {\n      upload.abort();\n      this.resetUploaderReferences(file.id, {\n        abort: true\n      });\n      resolve(`upload ${file.id} was canceled`);\n    });\n    eventManager.onFilePause(file.id, isPaused => {\n      if (isPaused) {\n        upload.pause();\n      } else {\n        upload.start();\n      }\n    });\n    eventManager.onPauseAll(file.id, () => {\n      upload.pause();\n    });\n    eventManager.onResumeAll(file.id, () => {\n      upload.start();\n    });\n    upload.start();\n  });\n}\nfunction _getCompanionClientArgs2(file) {\n  var _file$remote;\n  return {\n    ...((_file$remote = file.remote) == null ? void 0 : _file$remote.body),\n    protocol: 's3-multipart',\n    size: file.data.size,\n    metadata: file.meta\n  };\n}\nAwsS3Multipart.VERSION = packageJson.version;"],
  "mappings": "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",
  "names": ["original", "require_retry", "retry", "id", "_classPrivateFieldLooseKey", "_classPrivateFieldLooseKey", "_classPrivateFieldLooseBase", "id", "_classPrivateFieldLooseKey", "_classPrivateFieldLooseBase", "id", "_classPrivateFieldLooseKey", "AbortController", "_classPrivateFieldLooseBase", "id", "_classPrivateFieldLooseKey", "AbortController", "_classPrivateFieldLooseBase", "id", "_classPrivateFieldLooseKey", "key", "_classPrivateFieldLooseBase", "id", "_classPrivateFieldLooseKey", "packageJson", "defaultOptions", "_setS3MultipartState", "_getFile", "location"]
}
