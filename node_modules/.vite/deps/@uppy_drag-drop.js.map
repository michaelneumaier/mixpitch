{
  "version": 3,
  "sources": ["../../@uppy/utils/lib/isDragDropSupported.js", "../../@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/getFilesAndDirectoriesFromDirectory.js", "../../@uppy/utils/lib/getDroppedFiles/utils/webkitGetAsEntryApi/index.js", "../../@uppy/utils/lib/getDroppedFiles/utils/fallbackApi.js", "../../@uppy/utils/lib/getDroppedFiles/index.js", "../../@uppy/drag-drop/lib/locale.js", "../../@uppy/drag-drop/lib/DragDrop.js"],
  "sourcesContent": ["/**\n * Checks if the browser supports Drag & Drop (not supported on mobile devices, for example).\n */\nexport default function isDragDropSupported() {\n  const div = document.body;\n  if (!('draggable' in div) || !('ondragstart' in div && 'ondrop' in div)) {\n    return false;\n  }\n  if (!('FormData' in window)) {\n    return false;\n  }\n  if (!('FileReader' in window)) {\n    return false;\n  }\n  return true;\n}", "/**\n * Recursive function, calls the original callback() when the directory is entirely parsed.\n */\nexport default function getFilesAndDirectoriesFromDirectory(directoryReader, oldEntries, logDropError, _ref) {\n  let {\n    onSuccess\n  } = _ref;\n  directoryReader.readEntries(entries => {\n    const newEntries = [...oldEntries, ...entries];\n    // According to the FileSystem API spec, getFilesAndDirectoriesFromDirectory()\n    // must be called until it calls the onSuccess with an empty array.\n    if (entries.length) {\n      queueMicrotask(() => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, newEntries, logDropError, {\n          onSuccess\n        });\n      });\n      // Done iterating this particular directory\n    } else {\n      onSuccess(newEntries);\n    }\n  },\n  // Make sure we resolve on error anyway, it's fine if only one directory couldn't be parsed!\n  error => {\n    logDropError(error);\n    onSuccess(oldEntries);\n  });\n}", "import getFilesAndDirectoriesFromDirectory from './getFilesAndDirectoriesFromDirectory.js';\n/**\n * Polyfill for the new (experimental) getAsFileSystemHandle API (using the popular webkitGetAsEntry behind the scenes)\n * so that we can switch to the getAsFileSystemHandle API once it (hopefully) becomes standard\n */\nfunction getAsFileSystemHandleFromEntry(entry, logDropError) {\n  if (entry == null) return entry;\n  return {\n    kind:\n    // eslint-disable-next-line no-nested-ternary\n    entry.isFile ? 'file' : entry.isDirectory ? 'directory' : undefined,\n    name: entry.name,\n    getFile() {\n      return new Promise((resolve, reject) => entry.file(resolve, reject));\n    },\n    async *values() {\n      // If the file is a directory.\n      const directoryReader = entry.createReader();\n      const entries = await new Promise(resolve => {\n        getFilesAndDirectoriesFromDirectory(directoryReader, [], logDropError, {\n          onSuccess: dirEntries => resolve(dirEntries.map(file => getAsFileSystemHandleFromEntry(file, logDropError)))\n        });\n      });\n      yield* entries;\n    },\n    isSameEntry: undefined\n  };\n}\nfunction createPromiseToAddFileOrParseDirectory(entry, relativePath, lastResortFile) {\n  try {\n    if (lastResortFile === void 0) {\n      lastResortFile = undefined;\n    }\n    return async function* () {\n      const getNextRelativePath = () => `${relativePath}/${entry.name}`;\n\n      // For each dropped item, - make sure it's a file/directory, and start deepening in!\n      if (entry.kind === 'file') {\n        const file = await entry.getFile();\n        if (file != null) {\n          ;\n          file.relativePath = relativePath ? getNextRelativePath() : null;\n          yield file;\n        } else if (lastResortFile != null) yield lastResortFile;\n      } else if (entry.kind === 'directory') {\n        for await (const handle of entry.values()) {\n          // Recurse on the directory, appending the dir name to the relative path\n          yield* createPromiseToAddFileOrParseDirectory(handle, relativePath ? getNextRelativePath() : entry.name);\n        }\n      } else if (lastResortFile != null) yield lastResortFile;\n    }();\n  } catch (e) {\n    return Promise.reject(e);\n  }\n}\n\n/**\n * Load all files from data transfer, and recursively read any directories.\n * Note that IE is not supported for drag-drop, because IE doesn't support Data Transfers\n *\n * @param {DataTransfer} dataTransfer\n * @param {*} logDropError on error\n */\nexport default async function* getFilesFromDataTransfer(dataTransfer, logDropError) {\n  // Retrieving the dropped items must happen synchronously\n  // otherwise only the first item gets treated and the other ones are garbage collected.\n  // https://github.com/transloadit/uppy/pull/3998\n  const fileSystemHandles = await Promise.all(Array.from(dataTransfer.items, async item => {\n    let fileSystemHandle;\n\n    // TODO enable getAsFileSystemHandle API once we can get it working with subdirectories\n    // IMPORTANT: Need to check isSecureContext *before* calling getAsFileSystemHandle\n    // or else Chrome will crash when running in HTTP: https://github.com/transloadit/uppy/issues/4133\n    // if (window.isSecureContext && item.getAsFileSystemHandle != null)\n    // fileSystemHandle = await item.getAsFileSystemHandle()\n\n    // `webkitGetAsEntry` exists in all popular browsers (including non-WebKit browsers),\n    // however it may be renamed to getAsEntry() in the future, so you should code defensively, looking for both.\n    // from https://developer.mozilla.org/en-US/docs/Web/API/DataTransferItem/webkitGetAsEntry\n    const getAsEntry = () => typeof item.getAsEntry === 'function' ? item.getAsEntry() : item.webkitGetAsEntry();\n    // eslint-disable-next-line prefer-const\n    fileSystemHandle != null ? fileSystemHandle : fileSystemHandle = getAsFileSystemHandleFromEntry(getAsEntry(), logDropError);\n    return {\n      fileSystemHandle,\n      lastResortFile: item.getAsFile() // can be used as a fallback in case other methods fail\n    };\n  }));\n  for (const {\n    lastResortFile,\n    fileSystemHandle\n  } of fileSystemHandles) {\n    // fileSystemHandle and lastResortFile can be null when we drop an url.\n    if (fileSystemHandle != null) {\n      try {\n        yield* createPromiseToAddFileOrParseDirectory(fileSystemHandle, '', lastResortFile);\n      } catch (err) {\n        // Example: If dropping a symbolic link, Chromium will throw:\n        // \"DOMException: A requested file or directory could not be found at the time an operation was processed.\",\n        // So we will use lastResortFile instead. See https://github.com/transloadit/uppy/issues/3505.\n        if (lastResortFile != null) {\n          yield lastResortFile;\n        } else {\n          logDropError(err);\n        }\n      }\n    } else if (lastResortFile != null) yield lastResortFile;\n  }\n}", "import toArray from '../../toArray.js';\n\n// .files fallback, should be implemented in any browser\nexport default function fallbackApi(dataTransfer) {\n  const files = toArray(dataTransfer.files);\n  return Promise.resolve(files);\n}", "import webkitGetAsEntryApi from './utils/webkitGetAsEntryApi/index.js';\nimport fallbackApi from './utils/fallbackApi.js';\n\n/**\n * Returns a promise that resolves to the array of dropped files (if a folder is\n * dropped, and browser supports folder parsing - promise resolves to the flat\n * array of all files in all directories).\n * Each file has .relativePath prop appended to it (e.g. \"/docs/Prague/ticket_from_prague_to_ufa.pdf\")\n * if browser supports it. Otherwise it's undefined.\n *\n * @param dataTransfer\n * @param options\n * @param options.logDropError - a function that's called every time some\n * folder or some file error out (e.g. because of the folder name being too long\n * on Windows). Notice that resulting promise will always be resolved anyway.\n *\n * @returns {Promise} - Array<File>\n */\nexport default async function getDroppedFiles(dataTransfer, options) {\n  var _options$logDropError;\n  // Get all files from all subdirs. Works (at least) in Chrome, Mozilla, and Safari\n  const logDropError = (_options$logDropError = options == null ? void 0 : options.logDropError) != null ? _options$logDropError : Function.prototype;\n  try {\n    const accumulator = [];\n    for await (const file of webkitGetAsEntryApi(dataTransfer, logDropError)) {\n      accumulator.push(file);\n    }\n    return accumulator;\n    // Otherwise just return all first-order files\n  } catch {\n    return fallbackApi(dataTransfer);\n  }\n}", "export default {\n  strings: {\n    // Text to show on the droppable area.\n    // `%{browse}` is replaced with a link that opens the system file selection dialog.\n    dropHereOr: 'Drop here or %{browse}',\n    // Used as the label for the link that opens the system file selection dialog.\n    browse: 'browse'\n  }\n};", "import { UIPlugin } from '@uppy/core';\nimport toArray from '@uppy/utils/lib/toArray';\nimport isDragDropSupported from '@uppy/utils/lib/isDragDropSupported';\nimport getDroppedFiles from '@uppy/utils/lib/getDroppedFiles';\nimport { h } from 'preact';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore We don't want TS to generate types for the package.json\nconst packageJson = {\n  \"version\": \"4.1.3\"\n};\nimport locale from './locale.js';\nconst defaultOptions = {\n  inputName: 'files[]',\n  width: '100%',\n  height: '100%'\n};\n\n/**\n * Drag & Drop plugin\n *\n */\nexport default class DragDrop extends UIPlugin {\n  constructor(uppy, opts) {\n    super(uppy, {\n      ...defaultOptions,\n      ...opts\n    });\n    // Check for browser dragDrop support\n    this.isDragDropSupported = isDragDropSupported();\n    this.addFiles = files => {\n      const descriptors = files.map(file => ({\n        source: this.id,\n        name: file.name,\n        type: file.type,\n        data: file,\n        meta: {\n          // path of the file relative to the ancestor directory the user selected.\n          // e.g. 'docs/Old Prague/airbnb.pdf'\n          relativePath: file.relativePath || null\n        }\n      }));\n      try {\n        this.uppy.addFiles(descriptors);\n      } catch (err) {\n        this.uppy.log(err);\n      }\n    };\n    this.onInputChange = event => {\n      const files = toArray(event.currentTarget.files || []);\n      if (files.length > 0) {\n        this.uppy.log('[DragDrop] Files selected through input');\n        this.addFiles(files);\n      }\n\n      // Clear the input so that Chrome can detect file section when the same file is repeatedly selected\n      // (see https://github.com/transloadit/uppy/issues/768#issuecomment-2264902758)\n      // eslint-disable-next-line no-param-reassign\n      event.currentTarget.value = '';\n    };\n    this.handleDragOver = event => {\n      var _this$opts$onDragOver, _this$opts;\n      event.preventDefault();\n      event.stopPropagation();\n\n      // Check if the \"type\" of the datatransfer object includes files. If not, deny drop.\n      const {\n        types\n      } = event.dataTransfer;\n      const hasFiles = types.some(type => type === 'Files');\n      const {\n        allowNewUpload\n      } = this.uppy.getState();\n      if (!hasFiles || !allowNewUpload) {\n        // eslint-disable-next-line no-param-reassign\n        event.dataTransfer.dropEffect = 'none';\n        return;\n      }\n\n      // Add a small (+) icon on drop\n      // (and prevent browsers from interpreting this as files being _moved_ into the browser\n      // https://github.com/transloadit/uppy/issues/1978)\n      //\n      // eslint-disable-next-line no-param-reassign\n      event.dataTransfer.dropEffect = 'copy';\n      this.setPluginState({\n        isDraggingOver: true\n      });\n      (_this$opts$onDragOver = (_this$opts = this.opts).onDragOver) == null || _this$opts$onDragOver.call(_this$opts, event);\n    };\n    this.handleDragLeave = event => {\n      var _this$opts$onDragLeav, _this$opts2;\n      event.preventDefault();\n      event.stopPropagation();\n      this.setPluginState({\n        isDraggingOver: false\n      });\n      (_this$opts$onDragLeav = (_this$opts2 = this.opts).onDragLeave) == null || _this$opts$onDragLeav.call(_this$opts2, event);\n    };\n    this.handleDrop = async event => {\n      var _this$opts$onDrop, _this$opts3;\n      event.preventDefault();\n      event.stopPropagation();\n      this.setPluginState({\n        isDraggingOver: false\n      });\n      const logDropError = error => {\n        this.uppy.log(error, 'error');\n      };\n\n      // Add all dropped files\n      const files = await getDroppedFiles(event.dataTransfer, {\n        logDropError\n      });\n      if (files.length > 0) {\n        this.uppy.log('[DragDrop] Files dropped');\n        this.addFiles(files);\n      }\n      (_this$opts$onDrop = (_this$opts3 = this.opts).onDrop) == null || _this$opts$onDrop.call(_this$opts3, event);\n    };\n    this.type = 'acquirer';\n    this.id = this.opts.id || 'DragDrop';\n    this.title = 'Drag & Drop';\n    this.defaultLocale = locale;\n    this.i18nInit();\n  }\n  renderHiddenFileInput() {\n    var _restrictions$allowed;\n    const {\n      restrictions\n    } = this.uppy.opts;\n    return h(\"input\", {\n      className: \"uppy-DragDrop-input\",\n      type: \"file\",\n      hidden: true,\n      ref: ref => {\n        this.fileInputRef = ref;\n      },\n      name: this.opts.inputName,\n      multiple: restrictions.maxNumberOfFiles !== 1,\n      accept: (_restrictions$allowed = restrictions.allowedFileTypes) == null ? void 0 : _restrictions$allowed.join(', '),\n      onChange: this.onInputChange\n    });\n  }\n  static renderArrowSvg() {\n    return h(\"svg\", {\n      \"aria-hidden\": \"true\",\n      focusable: \"false\",\n      className: \"uppy-c-icon uppy-DragDrop-arrow\",\n      width: \"16\",\n      height: \"16\",\n      viewBox: \"0 0 16 16\"\n    }, h(\"path\", {\n      d: \"M11 10V0H5v10H2l6 6 6-6h-3zm0 0\",\n      fillRule: \"evenodd\"\n    }));\n  }\n  renderLabel() {\n    return h(\"div\", {\n      className: \"uppy-DragDrop-label\"\n    }, this.i18nArray('dropHereOr', {\n      browse: h(\"span\", {\n        className: \"uppy-DragDrop-browse\"\n      }, this.i18n('browse'))\n    }));\n  }\n  renderNote() {\n    return h(\"span\", {\n      className: \"uppy-DragDrop-note\"\n    }, this.opts.note);\n  }\n  render() {\n    const dragDropClass = `uppy-u-reset\n      uppy-DragDrop-container\n      ${this.isDragDropSupported ? 'uppy-DragDrop--isDragDropSupported' : ''}\n      ${this.getPluginState().isDraggingOver ? 'uppy-DragDrop--isDraggingOver' : ''}\n    `;\n    const dragDropStyle = {\n      width: this.opts.width,\n      height: this.opts.height\n    };\n    return h(\"button\", {\n      type: \"button\",\n      className: dragDropClass,\n      style: dragDropStyle,\n      onClick: () => this.fileInputRef.click(),\n      onDragOver: this.handleDragOver,\n      onDragLeave: this.handleDragLeave,\n      onDrop: this.handleDrop\n    }, this.renderHiddenFileInput(), h(\"div\", {\n      className: \"uppy-DragDrop-inner\"\n    }, DragDrop.renderArrowSvg(), this.renderLabel(), this.renderNote()));\n  }\n  install() {\n    const {\n      target\n    } = this.opts;\n    this.setPluginState({\n      isDraggingOver: false\n    });\n    if (target) {\n      this.mount(target, this);\n    }\n  }\n  uninstall() {\n    this.unmount();\n  }\n}\nDragDrop.VERSION = packageJson.version;"],
  "mappings": "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",
  "names": []
}
